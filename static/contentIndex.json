{"Game-Dev-&-Graphics/Basics":{"title":"üå±Basics/Intro","links":[],"tags":[],"content":"Additional Resources ¬ß\n\n\nGame Analysis\n\nCurious Archive - YouTube\nGame Maker‚Äôs Toolkit - YouTube\nGingy - YouTube\n\n\n\nTalks from people in industry\n\nGDC - YouTube\nJohn Carmack\n\nJohn Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309 (youtube.com)\nDecember 10 - DOOM‚Äôs 30th Anniversary Stream with John Romero, John Carmack, and David L. Craddock (youtube.com)\nJohn Carmack on The Issues and Rewards of Bleeding Edge Engine Development - YouTube\n\n\nPirate Software\n\nMake Video Games (youtube.com)\nGame Development\nPirateSoftware - Twitch\n\n\nJohnathan Blow\n\nEighteen thousand hours. A conversation with Jonathan Blow (youtube.com)\nThe future of software development in video games - Jonathan Blow and Tiago Loureiro (youtube.com)\nJonathan Blow - On Game Design, Books, Movies, &amp; many other things | gamedev Talks w Johanna Pirker (youtube.com)\nJonathan Blow: Video Games and the Human Condition - YouTube\n\n\nGabe Newell\n\nGabe Newell Talks Steam Deck‚Äôs Origin, Goals, and Future (youtube.com)\nGabe Newell on Good Game (youtube.com)\nGabe Newell Talks Half-Life: Alyx &amp; Valve‚Äôs Past and (Unexpected) Future ‚Äì IGN First (youtube.com)\nInterview with Gabe Newell (youtube.com)\nExclusive Gabe Newell Interview at Valve HQ subtitled (youtube.com)\n\n\nSid Meier\n\nSid Meier Interview | An Exclusive Conversation with ‚ÄúThe Godfather of Gaming‚Äù - (youtube.com)\nGDC 2010: Sid Meier Keynote - ‚ÄúEverything You Know is Wrong‚Äù (youtube.com)\nSid Meier‚Äôs Interesting Decisions (youtube.com)\nSid Meier‚Äôs Psychology of Game Design (youtube.com)\n\n\n\n\n\nDocumentaries about games\n\nNoclip - Video Game Documentaries - YouTube\nHalf-Life: 25th Anniversary Documentary (youtube.com)\nThe Untold History of Arkane: Dishonored / Prey / Ravenholm / LMNO / The Crossing (youtube.com)\nHistory of Metal Gear (1987 - 2021) | Documentary (youtube.com)\nHistory of Halo (1990 - 2022) | Documentary (youtube.com)\n\n\n"},"Game-Dev-&-Graphics/Cellular-Automata-(TODO)":{"title":"Cellular Automata (TODO)","links":["programming/Binary-and-Hexadecimal-(TODO)","Game-Dev-&-Graphics/Procedural-Generation-(TODO)"],"tags":[],"content":"Cellular automata are a weird concept to explain. Fundamentally they are a way of using simple rules to populate 2d and higher dimension arrays. They are somewhat of an enigma, they are typically incredibly simple algorithms, yet they‚Äôre used in incredibly complex simulations all the time. The easiest way to explain them might be to start with a working example, then work backwards to what you‚Äôre seeing. Below is an example of a cellular automata:\n\nAs you can see a very interesting pattern has occurred, based on an incredibly simple set of Rules (rule 90 in this case). So what is actually happening to generate this image?\nImportant terms (TODO) ¬ß\n‚Ä¶\nCells (TODO) ¬ß\n‚Ä¶\nNeighborhoods (TODO) ¬ß\n‚Ä¶\n\nVon Neuman vs Moore\n\nRules ¬ß\nRules is a shorthand name used for various patterns. It was created by Stephen Wolfram in his book A New Kind of Science1. These are defined using binary\nHere are a few:\n\nRule 30\n\nUsed to generate ‚Äúcone shell-like‚Äù patterns2\nRule 30 - Wikipedia\n\n\nRule 90\n\nSierpi≈Ñski triangle\n\nCan also do this pattern recursively\n5.8. Sierpinski Triangle ‚Äî Problem Solving with Algorithms and Data Structures (runestone.academy)\n\n\nCellular Automata | Rule 90 (youtube.com)\nRule 90 - Wikipedia\n\n\nRule 184\n\nUsed in traffic flow simulation, balistics, and particle deposition (stuff getting stuck to other stuff)\nRule 184 - Wikipedia\n\n\n\nRules in general are very pernicious to find benefits in. Many of the cellular automata uses, and theories come out of brute force just trying the algorithms.\n\nGame of Life (TODO) ¬ß\nConway‚Äôs game of life was a recreational math project by John Conway.\n\nGame of Life ‚Äî from Wolfram MathWorld\nLifeWiki (conwaylife.com)\nSpaceship - LifeWiki (conwaylife.com)\nInventing Game of Life (John Conway) - Numberphile (youtube.com)\n\nUses ¬ß\n\nProcedural Generation (TODO)\n\nTextures\n\nProcedural Textures Created on Cellular Automata (sccg.sk)\n[2111.13545] ŒºNCA: Texture Generation with Ultra-Compact Neural Cellular Automata (arxiv.org)\n\n\nTerrain Generation\n\nIan Holmes - Cellular Automata for Emergent Dungeons (youtube.com)\nNoise Smoothing\nIan Holmes - Cellular Automata for Emergent Dungeons (youtube.com)\nProcedural Generation with Cellular Automata ‚Äì Bronson Zgeb\n3D Cellular Automata - complex behavior from simple rules - YouTube\n\n\nNPC movement\n\nbbertka_thesis_edit3 (tamu.edu)\nSiamak-Finegrid20140612-updated (arxiv.org)\np01Conf96_a58-cd.dvi (ritsumei.ac.jp)\nWhat are neural cellular automata? (youtube.com)\n\n\n\n\nImage Repairing\n\nGrowing Neural Cellular Automata (distill.pub)\n\n\nSimulation\n\nRecrystalization (chemistry)\n\nSimulation of recrystallization by cellular automata - ScienceDirect\nrecrystallization, simulation, grain growth, FEM, recovery, texture, microstructure, Potts, Monte Carlo, stored energy, grain boundary, crystal plasticity (dierk-raabe.com)\nRecrystallization Simulation by Use of Cellular Automata | SpringerLink\n\n\nTraffic simlation (Civil engineering)\n\nCellular Automaton Traffic Simulation (udel.edu)\nFULLTEXT01.pdf (diva-portal.org)\nCellular Automaton Exercise (Traffic Modelling) (youtube.com)\n\n\nLattice Gas (Physics)\n\nLattice Gas Automata implemented in Python 3.8 (youtube.com)\n1.0 (fas.org)\nA Gentle Introduction to Lattice Gas Automaton for Simulation of Fluid Flow with Python. [The FHP model for Navier-Stokes Equations] | by Mohamed Gaber | Medium\n\n\nFalling sand\n\nHow To Code a Falling Sand Simulation (like Noita) with Cellular Automata (youtube.com)\nCoding Challenge 180: Falling Sand - YouTube\n\n\nSimulating computer systems\n\nLet‚Äôs BUILD a COMPUTER in CONWAY‚Äôs GAME of LIFE ‚††‚†µ (youtube.com)\nIntroduction to Complexity: Cellular Automata as Computers (youtube.com)\nComputation in Complex Systems : Computation Everywhere : Cellular Automata (youtube.com)\n\n\n\n\n\nAdditional Resources ¬ß\n\nCellular Automata: Complexity From Simplicity\nCellular Automata for video games (youtube.com)\nWolfram Atlas: Cellular Automata\nCellular Automata &gt; The 256 Rules (Stanford Encyclopedia of Philosophy)\nJohn von Neumann‚Äôs Cellular Automata | Embryo Project Encyclopedia (asu.edu)\nNeural Patterns\n3D Cellular Automata (youtube.com)\nGo Forth and Replicate | Scientific American\nCellular Automata. In the 1940s, John Von Neumann and‚Ä¶ | by Ahmad Hamze | Medium\nThe Incredible Story of The Game of Life (youtube.com)\nOrganic neural cellular automata (youtube.com)\nExploring Emergent Structures with Cellular Automata [English] (youtube.com)\ncellular-automata-models-complexity.pdf (wolfram.com)\nLife Worth Mentioning: Complexity in Life-Like Cellular Automata | Artificial Life | MIT Press\nCellular automata as models of complexity | Nature\nCellular Automaton - YouTube\nElementary Cellular Automaton - Intro to Computer Science (youtube.com)\nPapers\n\nThe General and Logical Theory of Automata (vordenker.de)\n[2309.14364] ALIFE 2023 (arxiv.org)\nAn Implementation of von Neumann‚Äôs Self-Reproducing Machine (mit.edu)\n\n\nCoding train series\n\n7.1: Cellular Automata - The Nature of Code (youtube.com)\n7.2: Wolfram Elementary Cellular Automata - The Nature of Code (youtube.com)\nI.0: Introduction - The Nature of Code (youtube.com)\nCoding Challenge 179: Elementary Cellular Automata (youtube.com)\n\n\nTalks By Stephen Wolfram\n\nCellular Automata and Rule 30 (Stephen Wolfram) | AI Podcast Clips (youtube.com)\nStephen Wolfram: Cellular Automata, Computation, and Physics | Lex Fridman Podcast #89 (youtube.com)\nHow to Think Computationally About AI, the Universe and Everything | Stephen Wolfram | TED (youtube.com)\nComputing a theory of everything | Stephen Wolfram (youtube.com)\nCellular Automata and Stephen Wolfram‚Äôs Theory of Everything | Peter Woit and Lex Fridman - YouTube\n\n\n\nFootnotes ¬ß\n\n\nStephen Wolfram: A New Kind of Science | Online‚ÄîTable of Contents (wolframscience.com) ‚Ü©\n\n\nSeashell patterns: left is real, right generated by a CA | Download Scientific Diagram (researchgate.net) ‚Ü©\n\n\n"},"Game-Dev-&-Graphics/Noise-(TODO)":{"title":"Noise (TODO)","links":["Game-Dev-&-Graphics/Cellular-Automata-(TODO)"],"tags":[],"content":"‚Ä¶\n\noften used in conjunction with Cellular Automata (TODO)\n\nPerlin Noise (TODO) ¬ß\n\nMinecraft\n\nMinecraft terrain generation in a nutshell (youtube.com)\n\n\nFlow Fields\n\nCoding Challenge #24: Perlin Noise Flow Field - YouTube\n\n\n\nVoronoi (TODO) ¬ß\n‚Ä¶\n\nFractures\n"},"Game-Dev-&-Graphics/Procedural-Generation-(TODO)":{"title":"Procedural Generation (TODO)","links":["Game-Dev-&-Graphics/Noise-(TODO)","Game-Dev-&-Graphics/Cellular-Automata-(TODO)"],"tags":[],"content":"‚Ä¶\nMeshes &amp; Textures (TODO) ¬ß\nThere are many algorithms that exist to create textures and/or meshes. I‚Äôm combining them into one category because most methods can be adapted to do either. Where possible you will want to produce textures, and maps (like bump maps) since meshes can often be more taxing. Essentially the idea behind these methods is that you can define some sort of algorithm that will allow you to\nBump/height, displacement &amp;  normal mapping (TODO) ¬ß\n‚Ä¶\nGreebling ¬ß\n‚Ä¶\n\nMind Lord‚Äôs guide on the art of Greebl | StarMade Dock\nProcedural Greeble Tutorial ‚Äì Linden Reid (lindenreidblog.com)\nInterstellar Illusions: ‚ÄúGreebles‚Äù Lend Large Sci-Fi Structures a Sense of Scale - 99% Invisible (99percentinvisible.org)\nVoronoi Greeble Displacement (shadertoy.com)\n\nWave function collapse (TODO) ¬ß\n\nHow Townscaper Works: A Story Four Games in the Making (youtube.com)\nThe Wave Function Collapse algorithm - YouTube\nEASY Wave Function Collapse Tutorial for Unity Games! [Unity Tutorial] (youtube.com)\n\nModel Synthesis (TODO) ¬ß\n\nModel Synthesis and Modifying in Blocks ‚Äì BorisTheBrave.Com\nModel Synthesis Algorithm (youtube.com)\nContinuous Model Synthesis (youtube.com)\nModel Synthesis - Paul Merrell\nTile-Based Procedural Terrain Generation (tuwien.ac.at)\n\nAdditional Resources ¬ß\n\nAnimation\n\nTechnical talks &amp; references\n\nProcedural Animation (weaverdev.io)\nProcedurally Animating Creatures for my Game | Withersworn Devlog (youtube.com)\nGiving Personality to Procedural Animations using Math - YouTube\nAnimation Bootcamp: An Indie Approach to Procedural Animation (youtube.com)\nLearn Inverse Kinematics the Simple Way (youtube.com)\nGiving Personality to Procedural Animations using Math (youtube.com)\nUnity procedural animation tutorial (10 steps) (youtube.com)\nAn Introduction to Procedural Animations - Alan Zucconi\n‚ÄùStep by Step‚Äù Procedural Animation (youtube.com)\nCharacter Locomotion in Half-Life: Alyx - SIGGRAPH 2021 (youtube.com)\nProcedural Animation in 5 Minutes | devlog 1 (youtube.com)\nExplaining Procedural Animation in Game and how it is done (youtube.com)\nNEW Procedural Animation In Godot 4.0 (youtube.com)\nGodot 4 Inverse Kinematics (youtube.com)\nNVIDIA‚Äôs New AI Trained For 5,000,000,000 Steps! (youtube.com)\nNVIDIA‚Äôs New AI Trained For 10 Years! But How? ü§∫ (youtube.com)\n\n10 years == 10 days of training\n\n\nPractical Procedural Generation for Everyone (youtube.com)\nProcedural Modeling Using Graph Grammars (youtube.com)\n\n\nInspiration\n\nCodeer - YouTube\nProcedural Walk System (youtube.com)\nSIGGRAPH 2020 | Learned Motion Matching (youtube.com)\nAnotherCraft (Minecraft clone | master thesis) (youtube.com)\nProcedural Climbing in Unity (youtube.com)\nThe Procedural Animation of Gibbon: Beyond the Trees - Wolfire Games (youtube.com)\nProcedural Animation (Quadruped) in Unreal Engine 5 (youtube.com)\nProcedural walking animation in Unreal Engine 5 | Devlog (youtube.com)\n1 year of progress on my game (youtube.com)\nPerformance showcase (youtube.com)\nProcedural hydrogels in Blender (youtube.com)\nCreating Little Castles with Wave Function Collapse (youtube.com)\nFull Body IK: Procedural Dragon Animations (youtube.com)\nDesigning (Procedural) Monsters (youtube.com)\n\n\n\n\nTerrain\n\nNoise (TODO)\nProcedural Generation with Wave Function Collapse and Model Synthesis | Unity Devlog (youtube.com)\nProcedurally Generated 3D Dungeons (youtube.com)\nProcedural Generation: Programming The Universe (youtube.com)\nHerbert Wolverson - Procedural Map Generation Techniques (youtube.com)\nGood Looking Procedural Generation | DEVLOG #1 | Warden‚Äôs Will | Unreal Engine 4 (youtube.com)\nProcedural Terrain Generation - YouTube\nHow do you ensure procedural terrain is consistent and coherent across different platforms and devices? (linkedin.com)\nterrain_synth_tvcg.pdf (gatech.edu)\n\n\nMeshes\n\nProcedural Mesh Tutorial, Part 1: Mesh Basics (youtube.com)\nProcedural Geometry - An Improvised Live Course (youtube.com)\nMesh from Math - The basics of Marching Cubes (youtube.com)\nUnite 2015 - A coder‚Äôs guide to spline-based procedural geometry (youtube.com)\nGetting Started With Procedural Mesh Generation | Inside Unreal (youtube.com)\nMESH GENERATION in Unity - Basics (youtube.com)\nUnite 2016 - The Power of Procedural Meshes (youtube.com)\nMesh Generation Algorithm (youtube.com)\n\n\nSimulation and NPC controls\n\nCellular Automata (TODO)\n‚ÄúFlocks‚Äù and boids\n\nDemo\nCoding Adventure: Boids (youtube.com)\nBoids (stanford.edu)\nHow do Boids Work? A Flocking Simulation (youtube.com)\nCoding Challenge #124: Flocking Simulation (youtube.com)\n\n\n\n\nConsiderations\n\nLet‚Äôs Talk about Procedural Generation (youtube.com)\nIs Procedural Animation Worth it? (youtube.com)\n\n\nExample games\n\nDwarf fortress\n\nHow Two People Created Gaming‚Äôs Most Complex Simulation System\n\n\nMinecraft\n\nMinecraft terrain generation in a nutshell (youtube.com)\nThe World Generation of Minecraft - Alan Zucconi\nReinventing Minecraft world generation by Henrik Kniberg (youtube.com)\n\n\nShadow of mordor/Shadow of war\n\nProcedural generation / Shadow of Mordor [WGTU üá¨üáß #19] (youtube.com)\nHow the Nemesis System Creates Stories (youtube.com)\nMiddle-earth: Shadow of War¬†guide: The Nemesis System - Polygon\nMiddle-earth: Shadow of Mordor Designers Reveal How They Made the Nemesis System (Mini-Documentary) (youtube.com)\n\n\nRain World\n\nThe Most Complex Ecosystem in any Game (youtube.com)\nThe Rain World Animation Process - YouTube\n\n\nDiablo\n\nDungeon Generation in Diablo 1 ‚Äì BorisTheBrave.Com\nRandomness &amp; conditioning / Diablo 3 [WGTU üá¨üáß #18] (youtube.com)\nDiablo Dungeon Design ft. Ed Hanes (youtube.com)\nReverse Design: Diablo 2 - Randomness in Diablo 2 (thegamedesignforum.com)\n\n\n\n\n"},"Game-Dev-&-Graphics/Quaternians":{"title":"Quaternians","links":[],"tags":[],"content":"\nDon‚Äôt Get Lost in Deep Space: Understanding Quaternions - Technical Articles (allaboutcircuits.com)\nQuaternion - Wikipedia\n"},"Game-Dev-&-Graphics/Rendering-(TODO)":{"title":"Rendering (TODO)","links":[],"tags":[],"content":"‚Ä¶\nDepth Peeling (TODO) ¬ß\nA method that will allow you to have multiple semi-transparent objects render properly.\n\nOrder independent transparency (Depth peeling) (youtube.com)\nDual Depth Peeling Implementation in WebGL | by ShrekShao | Medium\nVTK Technical Highlight: Dual Depth Peeling (kitware.com)\nDepth Peeling Order Independent Transparency in Vulkan - Matthew Wellings\nOrderIndependentTransparency.pdf (nvidia.com)\n\nAdditional Resources ¬ß\n\nLow Complexity, High Fidelity: The Rendering of INSIDE (youtube.com)\n"},"Game-Dev-&-Graphics/Shaders-(TODO)":{"title":"Shaders (TODO)","links":[],"tags":[],"content":"‚Ä¶\n\nThe Book of Shaders\nIntroduction to shaders: Learn the basics!\nAn introduction to Shader Art Coding (youtube.com)\n"},"Game-Dev-&-Graphics/UI-Strategies-(TODO)":{"title":"UI Strategies (TODO)","links":[],"tags":[],"content":"Immediate vs Retained UI ¬ß\n\nImmediate-Mode Graphical User Interfaces - 2005 (youtube.com)\nImmediate Mode vs Retained Mode ‚Äì oandre.gal\nImmediate UI vs Retained UI - Collin Quinn‚Äôs Portfolio (collquinn.gitlab.io)\nYou don‚Äôt need DOM to do UI (youtube.com)\n"},"HCI-&-VR/basics":{"title":"üå±Basics/Intro","links":[],"tags":[],"content":"‚Ä¶"},"Hardware/Basics":{"title":"üå±Basics/Intro","links":["Hardware/CPU-(TODO)"],"tags":[],"content":"Hardware is the name we give to the physical components of a computer. The hardware is all the stuff that actually sends the signals (electrical or otherwise) we need to make our computers work. Generally speaking there are a few pieces‚Äô of hardware you need, and will be found in basically every machine‚Ä¶\n\n\nGPU (often optional or integrated into CPU); What actually renders frames to the monitor that you see. This can be a ‚Äúdiscrete gpu‚Äù (one you buy and install), or integrated GPU where the GPU is built into the CPU\n\n\nResources\n\n\n(5) CPUs vs GPUs As Fast As Possible - YouTube\n\n\n(6) CPU vs GPU (What‚Äôs the Difference?) - Computerphile - YouTube\n\n\n\n\n\n\nMotherboard; This is essentially what connects all of your components. There are tons of specs to talk about with motherboards but generally speaking you will want to select motherboards based on the fact you are going to be limited to the chipset the CPU you are using is compatible with.\n\n\nResources\n\n\n(8) Motherboards Explained - YouTube\n\n\n(8) What is a Chipset as Fast As Possible - YouTube\n\n\n(8) How Motherboards Work - Turbo Nerd Edition - YouTube\n\n\n\n\n\n\nRAM (primary Volatile storage); This is where your system will store temporary data, such as data that apps need to run\n\n\nVolatile implies that it requires electricity to store it‚Äôs data, this means when the electricity stops runing through it all the data is lost. This is handy because it means that if you get an error and shutdown your PC you know your RAM will be cleared\n\n\nThe capacity of RAM determines how much multitasking you can do. Generally speaking if you run out of RAM you will be unable to run new processes (not always true [check out page files])\n\n\nFrequency, this is measured in MHz and is how many bits/s can be sent on one line. This is not a catch-all for speed however and should be balanced with channels and timings\n\n\nMemory Timing; This describes a number of different measurements available, see the video below for details\n\n\nChannels (single, dual, quad); Generally speaking your motherboard will determine if your RAM should be single, dual or quad channel. It is recommended to just go with what it says, however keep in mind going with a different config can effect performance\n\n\nresources\n\nHow Do Memory Timings Work? - YouTube\n\n\n\n\n\nNon-volatile or persistant storage (HDD or SSD); This is what is used to store your files persistantly (when the PC is turned off and on)\n\n\nResources\n\n\n(7) SSDs vs Hard Drives as Fast As Possible - YouTube\n\n\n(7) Explaining SSDs: Form Factors, Interfaces &amp; Technologies - YouTube\n\n\n(7) Explaining the Difference Between SSD NVMe and M2 SATA and mSATA - YouTube\n\n\n\n\n\n\n\nNetwork Card[NIC; Network interface card] (Ethernet or wifi); This is what is used to connect to networks (such as the internet). It can be a wifi card to communicate wirelessly, or ethernet based. Typically this is included in your motherboard now, but you can have multiple NIC‚Äôs\n\n\nResources\n\n\n(7) NIC (Network Interface Card) - YouTube\n\n\n(7) What is NIC or Network Interface Card or Network Card? | TechTerms - YouTube\n\n\n\n\n\n\nSoundcard (usually integrated in motherboard); This is what generates audio for you to listen to. Generally speaking this is integrated into the motherboard, and often not required to buy seperately\n\n\nResources\n\nSound Cards, DACs, and Amps as Fast As Possible - YouTube\n\n\n\n\n\nUSB chipset; This is part of your motherboard, but often these are seperate chips that can break independent of the rest of the motherboard so I figured I would mention it:\n\n\nResources\n\n(8) An Introduction to Computer Chipsets - YouTube\n\n\n\n\n\nPSU (power supply unit); This is what actually powers all the parts of your PC\n\n\nResources\n\n\nBeginners Guide to Power Supplies‚Ä¶ How to understand the ratings - YouTube\n\n\nHow Power Supplies Work - Turbo Nerd Edition - YouTube\n\n\n\n\n\n\nHardware Basics - YouTube\nDifferent Storage types and how they are used ¬ß\n\nNon volatile (slowest, but persistant, most space) ‚Äî&gt; RAM (Faster, volatile, less space)\n‚Äî&gt; Level caches (Fastest, very volatile, least space)\n\n(5) Cache Memory Explained - YouTube\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComponent (click for more info)DescriptionMotherboardCPU (TODO)The ‚Äúbrain‚Äù of the computer. This is what essentially tells your computer what to do, and helps coordinates other parts of your computerRAMSSD/HDDGPUNIC/WIFI/EthernetPeripherals"},"Hardware/CPU-(TODO)":{"title":"CPU (TODO)","links":[],"tags":[],"content":"The ‚Äúbrain‚Äù of the computer. This is what essentially tells your computer what to do, and helps coordinates operations between other parts of your computer. There are a few important specifications to understand:\n\n\nInstruction size; This is essentially the amount of space each instruction in a CPU has to work with. 32 bit programs will run on 32 bit and 64 bit systems, but 64 bit programs will ONLY run on 64 bit systems\n\n32Bit\n64Bit\n\n\n\nIt‚Äôs important to note 3 common architectures that are used\n\nx86; Most intel and AMD chips are x86 (often called by 86)\nARM; A lower-power architecture used in many phones and also new M series macbooks\nRISC &amp; RISC 5; An open source alternative used by some companies like IBM with the intention of simplicity of system\n\n\n\nLevel Caches; This is a system that allows a CPU to store small bits of information to process them quickly. The lower the ‚Äúlevel‚Äù, the less storage space, but the faster it is. These are typically denoted as something like L3 (level 3) 32MB, L2 (level 2) 8MB, L1 (level 1) 3.5MB. This system is a form of Volatile storage, this implies that it requires electricity to store it‚Äôs data, this means when the electricity stops runing through it all the data is lost\n\n\nResources\n\nPutting the ‚Äúyou‚Äù in CPU\n32-bit vs 64-bit Computers &amp; Phones as Fast As Possible - YouTube\nARM Processor - Sowing the Seeds of Success - Computerphile - YouTube\nARM vs x86: Explained - YouTube\nHow a CPU Works in 100 Seconds // Apple Silicon M1 vs Intel i9 - YouTube\n(5) What is Cache Memory? L1, L2, and L3 Cache Memory Explained - YouTube\n[(5) What is CPU Cache? - YouTube](https://www.youtube.com/watch?v=sHqNMHf2UNI\n(5) Why do CPUs Need Caches? - Computerphile - YouTube\n\n\n\nReferences ¬ß\n\nReinventing the Processor (youtube.com)\n"},"Hardware/Connection-Types-(TODO)":{"title":"Connection Types (TODO)","links":[],"tags":[],"content":"There are tons of ways of connecting your PC to peripherals (devices outside your PC)"},"Networking-&-Webdev/Basics":{"title":"üå±Basics/Intro","links":[],"tags":[],"content":"‚Ä¶\nAdditional resources ¬ß\n\nAbout early internet\n\nThe Computer Chronicles - The Internet (1993) (youtube.com)\nBill Gates Explains the Internet to Dave (1995) | Letterman (youtube.com)\nThe early internet is breaking - here‚Äôs how the World Wide Web from the 90s on will be saved (youtube.com)\n\n\n"},"Networking-&-Webdev/HTTP-(TODO)":{"title":"HTTP (TODO)","links":[],"tags":[],"content":"\nRFC 4229 - HTTP Header Field Registrations (ietf.org)\n"},"Networking-&-Webdev/Networking-Error-Correction-(TODO)":{"title":"Networking Error Correction (TODO)","links":[],"tags":[],"content":"UDP FEC (Forward Error Correction) ¬ß\n\nUsing Forward Error Correction to Mitigate Packet Loss (f5.com)\nIs FEC-code needed for UDP? - Stack Overflow\nRFC 6363: Forward Error Correction (FEC) Framework (rfc-editor.org)\n\n"},"Networking-&-Webdev/Products-and-Services-(TODO)":{"title":"Products and Services (TODO)","links":[],"tags":[],"content":"\nTunnel | Zero Trust App Connector | Cloudflare\n"},"Networking-&-Webdev/SMTP-(TODO)":{"title":"SMTP (TODO)","links":[],"tags":[],"content":"\nSending raw email using the Amazon SES API - Amazon Simple Email Service\nParse Raw Email (MIME) Guide - SigParser\nWhy Plain Text Emails Still Work &amp; How to Use Them - Litmus\nSee the whole ‚Äòraw‚Äô email message in Outlook - Office Watch (office-watch.com)\nSending raw or plain email with Laravel (devinthewild.com)\nRead email messages in plain text - Microsoft Support\nView the raw email message in Gmail - The Electric Toolbox Blog\nRaw Message Format (cloudmailin.com)\n\nAdditional ¬ß\n\n37C3 - SMTP Smuggling ‚Äì Spoofing E-Mails Worldwide (youtube.com)\nEmail vs Capitalism, or, Why We Can‚Äôt Have Nice Things - Dylan Beattie - NDC Oslo 2023 - YouTube\n"},"Networking-&-Webdev/Virtualization-(TODO)":{"title":"Virtualization (TODO)","links":[],"tags":[],"content":"‚Ä¶\nVM‚Äôs (TODO) ¬ß\n‚Ä¶\nContainerization (TODO) ¬ß\n‚Ä¶\nOrchestration &amp; Infrastructure as Code (TODO) ¬ß\n‚Ä¶\n\ndeclarative\nA Theory of Voluntary Cooperation (markburgess.org)\nPromise theory - Wikipedia\nelectronics-12-00942-v2.pdf\nJudge0 - Where code happens.\nTwine: Efficient, reliable cluster management - Engineering at Meta (fb.com)\n"},"OS-&-Firmware/Basics":{"title":"üå±Basics/Intro","links":[],"tags":[],"content":"Firmware/Bios ¬ß\nWhen starting a computer your bios will run after POSTing (basically a check that happens before the bios to make sure hardware is running). This is what is called firmware. Essentially it‚Äôs code that is written directly onto the hardware that lets it start up. From there it then passes on to the bootloader:\n\n\nHow To - What is BIOS? - YouTube\n\n\nPC BIOS Settings - YouTube¬†&lt;‚Äî Explains some basic settings\n\n\nBIOS, CMOS, UEFI - What‚Äôs the difference? - YouTube¬†(useful to know about CMOS if you need to troubleshoot hardware)\n\n\nBootloader ¬ß\nThis then is what starts the kernel. Most importantly this is the system that when the bios talks to it can actually provide the memory location of where to start the kernel. This is important because it allows you to setup multiboot systems where more than 1 OS, and even OS‚Äôs with different kernels can be loaded:\n\n\nGRUB:¬†GNU GRUB - Wikipedia,¬†GNU GRUB - GNU Project - Free Software Foundation (FSF)\n\n\nrEIFIT:¬†The rEFInd Boot Manager (rodsbooks.com)\n\n\nclover:¬†GitHub - CloverHackyColor/CloverBootloader: Bootloader for macOS, Windows and Linux in UEFI and in legacy mode\n\n\nWindows 10 boot manager¬†Windows 10 Boot Manager - YouTube\n\n\nKernel ¬ß\nThe kernel is what allows your operating system to talk to hardware. Generally speaking this is high-level interfaces, while all the complicated portions of the communication are handled by the drivers:\n\n\nWhat is a Kernel and what does it do? Explore the Kernels of Linux, Windows, and MacOS. - YouTube\n\n\nLinux And Windows Kernel Comparison - YouTube\n\n\n24C3: Inside the Mac OS X Kernel - YouTube\n\n\nWhat is a kernel - Gary explains - YouTube\n\n\nWrite Your Own 64-bit Operating System Kernel #1 - Boot code and multiboot header - YouTube\n\n\nDrivers ¬ß\nThis is where the magic happens. Typically drivers are talked about as seperate from the kernel because they are installed seperately, though they are typically kernal¬†‚Äúmodules‚Äù. Some drivers are part of userspace, but people often think of it as blurring the lines between kernel and userspace, not to mention some implementations actually skip the kernel entirely and just access drivers directly.\nGenerally speaking each device is going to be different, and therefore will need a different driver. Some will just work with generic drivers, but it‚Äôs usually best to run a device with it‚Äôs specific driver.\n\nWhat is a Software Driver as Fast As Possible - YouTube\n\nThe flow of data ¬ß\nTo start a system it looks like:\n\nHardware ‚Äî&gt; Talks to Firmware/bios ‚Äî&gt; talks to bootloader ‚Äî&gt; talks to kernel\n‚Äî&gt; Starts operating system\nonce started the flow looks more like:\n\n¬†Hardware ‚Äî&gt; Kernel ‚Äî&gt; Userspace (what you see and all the processes you see running including windows managers, desktop environments, user management, etc.)\nSo for example if you have a frame from a video game first the hardware would generate the frame, it would then send it via the graphics driver to the display server, which would then render it through the Desktop environment/window manager"},"OS-&-Firmware/Unix-&-Linux":{"title":"Linux","links":["programming/Open-Source-&-Free-Software"],"tags":["foss","os","linux"],"content":"\n\n                  \n                  Info \n                  \n                \nHistory informs some of the technical information, as such this section will include technical info about linux, and some history. This I think is the best way to talk about linux &amp; unix since often the history informs the technical decisions.\n\nUNIX was an operating system developed at bell labs. UNIX was an incredibly popular operating system especially for academics when it was released. UNIX was primarily closed source, meaning it‚Äôs code was proprietary. It was a system that had tons of tools that were built to internally suit the needs of bell labs. These tools are often still used today (like grep, awk, cat etc.), or something inspired from them.\nLinux on the other hand was open source and is a combination of a few pieces of software all rolled up into one package. Linux as we know it today is a combination of:\n\nGNU tools (gcc etc.)\nLinus Torvalds‚Äô Kernel (called linux)\n\nPeople who are a part of the free software movement will often call it GNU + Linux instead of just Linux. Technically Linux is just the kernel, and the rest of the tools in ‚ÄúLinux‚Äù are mostly GNU tools.\n\n\n                  \n                  Info \n                  \n                \nYou will see me use the word nix or *nix. This is a shortform for any unix-like operating system, like linux\n\nLinux vs UNIX ¬ß\nWhat are the actual differences between them, and why are they mentioned together? The main reason you see the two mentioned together is because the philosophies that guided the development of UNIX were a large influence on Linux. Both follow the POSIX standards for how to implement operating systems. Many early Linux users were UNIX users who wanted to find a free software alternative to UNIX. At the time UNIX was relatively expensive, and so for individuals an open source alternative was appealing. Besides that they each use separate kernels, and internal tools to build out the specifics of each operating system.\nDistros ¬ß\nA distro follows the traditional format of the underlying operating system, but typically with more specific changes. For example [linux mint](https://linuxmint.com/, Zorin OS, and ubuntu are all linux debian-systems, but they have quite significant differences as far as user experience goes. I mentioned debian in the last sentence, what is debian?\nWell for distros there are lots of ‚Äúcategories‚Äù of distros, where the distros will follow the design philosophies of a broader system. For example someone might say they use a debian based system (like we talked about before), or they may say they prefer to use arch-based, or maybe fedora based. What this means is that the distro implements the features of debian, arch or fedora. Which one your distro is based on will change what files you can install, the user interfaces you can use, and the philosophies behind the more ‚Äúsubjective‚Äù parts of the POSIX standard. Debian-based systems for example can install .deb programs, whereas fedora-based would instead be able to install .rpm programs.\nAdditional Resources ¬ß\n\nTechnical information\n\nUnix Pipeline (Brian Kernighan) - Computerphile (youtube.com)\nFile systems\n\nUNIX Inodes and Files (Harry) (youtube.com)\nWhat‚Äôs behind a file descriptor in Linux? Also, i/o redirection with dup2. (youtube.com)\nLearning the Linux File System (youtube.com)\nLinux File Permissions in 5 Minutes | MUST Know! (youtube.com)\n\n\nSyscalls\n\nUnix system calls (1/2) (youtube.com)\nUnix system calls (2/2) (youtube.com)\n\n\n\n\nImportant people\n\nDennis Ritchie\n\nhe UNIX Time-Sharing System (berkeley.edu)\n\n\nKen Thompson\n\nKen Thompson interviewed by Brian Kernighan at VCF East 2019 (youtube.com)\nKen Thompson and Dennis Ritchie Explain UNIX (Bell Labs) (youtube.com)\n\n\nBrian Kernighan\n\nBrian Kernighan: UNIX, C, AWK, AMPL, and Go Programming | Lex Fridman Podcast #109 (youtube.com)\nCoffee with Brian Kernighan - Computerphile (youtube.com)\nUNIX was designed for programmers | Brian Kernighan and Lex Fridman - YouTube\nUNIX Special: Profs Kernighan &amp; Brailsford - Computerphile (youtube.com)\n\n\nLinus Torvalds\n\nThe mind behind Linux | Linus Torvalds | TED (youtube.com)\nKeynote: Linus Torvalds, Creator of Linux &amp; Git, in Conversation with Dirk Hohndel (youtube.com)\nQ&amp;A with Linus Torvalds (youtube.com)\nAalto Talk with Linus Torvalds [Full-length] - YouTube\n\n\nJohn ‚Äúmaddog‚Äù hall\n\nJon ‚Äúmaddog‚Äù Hall talks Unix and Linux history (youtube.com)\n\n\n\n\nTalks &amp; Documentaries about linux and/or unix\n\nThe Rise of Unix. The Seeds of its Fall. (youtube.com)\nLinux: The Origin Story (youtube.com)\nThe Computer Chronicles - UNIX (1985) (youtube.com)\nUnix50 - Unix Today and Tomorrow: The Languages (youtube.com)\nUNIX: Making Computers Easier To Use ‚Äî AT&amp;T Archives film from 1982, Bell Laboratories - YouTube\nAT&amp;T Archives: The UNIX Operating System (youtube.com)\nHistory of Gnu, Linux, Free and Open Source Software (Revolution OS) (youtube.com)\nThe History of Unix, Rob Pike\n\n\n"},"OS-&-Firmware/Userspace":{"title":"Userspace","links":[],"tags":[],"content":"This is the good old operating system you know and love. This is where applications, your desktop, and %90 of computing is done.\n\n(5) The Layman‚Äôs Guide to Linux: User Space - YouTube¬†(Covers most things at once, but I would recommend doing other sections first then come back to this video)\n\nPackage managers ¬ß\nThese systems are designed to help a user manage packages (applications and services that run on an OS). These are common on linux systems, but less common on windows. They give advantages over just normally just installing applications because you can manage versions, updates, and uninstalling more easliy:\n\n\napt, dpkg, git, Python PiP (Linux Package Management) // Linux for Hackers // EP 5 - YouTube\n\n\nThe APT Package Manager in Debian and Ubuntu - YouTube\n\n\nWindows Package Manager | Microsoft Docs\n\n\nThe Missing Package Manager for macOS (or Linux) ‚Äî Homebrew\n\n\nChocolatey Software | Chocolatey - The package manager for Windows\n\n\nThere is an alternative to package managers that are essentially containerized forms of package managers:\n\n\nSnapcraft - Snaps are universal Linux packages\n\n\nFlatpak‚Äîthe future of application distribution\n\n\nDistro‚Äôs ¬ß\nDistro‚Äôs or distributions is the name given to different ‚Äúflavours‚Äù of operating systems (really only applies to linux since there‚Äôs 1 version of macos and 1 version of windows). A distro is what you actually install to your computer and includes a kernel, and all the default userspace packages and configurations.\nThere are many different distro‚Äôs, but generally there are some groups of ‚Äúsimilar‚Äù ones that do thing in a similar way and have similar setups. Packages can have a wide range of formats and which ones are supported is often tied to the type of distro you use\nDebian ¬ß\nThe most popular type of linux distro. Can use raw binaries or .deb files for packages. Typically uses apt as a package manager:\n\n\nZorinOS:¬†Zorin OS - Make your computer better.\n\n\nMint:¬†Home - Linux Mint,¬†Linux Mint ¬∑ GitHub\n\n\nUbuntu:¬†Enterprise Open Source and Linux | Ubuntu\n\n\nCutefish:¬†CuteFishOS - A Clean Mac-Like Linux Desktop - YouTube\n\n\nParrot:¬†Parrot Security\n\n\nKali:¬†Kali Linux | Penetration Testing and Ethical Hacking Linux Distribution\n\n\nPOP!:¬†Pop!_OS by System76\n\n\nElementary:¬†The thoughtful, capable, and ethical replacement for Windows and macOS ‚ãÖ elementary OS\n\n\nArch ¬ß\nConsidered to be the bleeding edge, and also typically the hardest learning curve. Tends to use pacman in conjunction with AUR (Arch user repository) to get it‚Äôs packages:\n\n\nManjaro:¬†Manjaro\n\n\nEndeavour:¬†EndeavourOS ‚Äì A terminal-centric distro with a vibrant and friendly community at its core\n\n\nReborn:¬†Homepage rebornos - RebornOS\n\n\nFedora ¬ß\nOften considered the more ‚Äúcorporate‚Äù type of distro:\n\nFedora (getfedora.org)\n\nLFS (Linux from scratch) ¬ß\nLinux from scratch is exactly what it sounds like. You build your system from nothing and basically create ‚Äúyour own distro‚Äù\n\n\nWelcome to Linux From Scratch!\n\n\nLinux From Scratch - Wikipedia\n\n\nProcesses ¬ß\nA running program. They are essentially enclosed processes that have a bunch of state. When a process is made it will have a PID you can use to identify the process. While each process is seperate you can technically ‚Äúpipe‚Äù the contents of processes between each other, typically using STDIN and STDOUT:\n\n\nLinux Internals - Process Management - YouTube\n\n\nLinux processes, init, fork/exec, ps, kill, fg, bg, jobs - YouTube\n\n\nTerminal/Shell ¬ß\nThe shell is the name given to the system that lets you start and stop processes. The terminal is just the visualization of the shell that you interact with. When you start processes via clicking on a shortcut this still goes through the shell, but you likely won‚Äôt see the terminal representation.\nShells:\n\n\nBash;¬†Bash (Unix shell) - Wikipedia,¬†Bash - GNU Project - Free Software Foundation\n\n\nZSH;¬†Z shell - Wikipedia,¬†Zsh\n\n\nFish:¬†fish shell\n\n\nTerminals\n\n\nOh My Zsh - a delightful &amp; open source framework for Zsh\n\n\nTermux;¬†Termux | Terminal emulator and Linux environment for Android.\n\n\nCmder;¬†cmderdev/cmder: Lovely console emulator package for Windows (github.com)\n\n\nwarp:¬†Warp: The terminal for the 21st century\n\n\nAlacritty:¬†alacritty/alacritty: A cross-platform, OpenGL terminal emulator. (github.com)\n\n\nAdditional references\n\n\nThe Terminal vs The Shell - YouTube\n\n\nTerminal Basics\n\n\nIntroduction to Basic Linux Commands - YouTube\n\n\nBash in 100 Seconds - YouTube\n\n\nBatch/Cmd Programming: Lesson 1 (Basics) - YouTube\n\n\nBash Shell Scripting Tutorial For Beginners - Bash Basics in 20 Minutes - YouTube\n\n\nMicrosoft PowerShell for Beginners - Video 1 Learn PowerShell - YouTube\n\n\nStreams ¬ß\nStreams is the name given to the system used to communicate with processes through the shell. There are 2 main types (and also STDERR you can look into yourself)\n\nSTDIN ¬ß\nThe INput stream that the terminal and commands use\nSTDOUT ¬ß\nThe OUTput stream that is what you as a user often read when a command is finished\nPiping ¬ß\nYou can PIPE the output (stdout) of one command (command1), or some text to the input (stdin) of another command (command2):\ncommand1 | command2\nThis means command2 will run using the output of command1 as input\nSudo/permissions ¬ß\nSome folders and files are locked to ‚Äúadmins‚Äù, on linux you need to use the command¬†sudo¬†to allow access. On windows you need to use the gui prompt.\nFile System ¬ß\nThis is the system that is used to keep track of your files. People use this term to refer to multiple things (including both the way things are stored, and the file structure itself), but this just simply refers to the actual process of how your files are stored.\nFurther on we will talk about the file system structures that are common on operating systems, and that is not about how something is stored, but where things are commonly stored (though sometimes people still just call it the file system)\n\n(5) Files &amp; File Systems: Crash Course Computer Science #20 - YouTube\n‚ÄùThe ZFS filesystem‚Äù - Philip Paeps (LCA 2020) (youtube.com)\n\nFile System Structure ¬ß\nThis is the standard used to describe where you should look in a file system for certain things (i.e. installed apps, default configurations etc.)\n\n\nLinux Directories Explained in 100 Seconds - YouTube\n\n\nLinux File System/Structure Explained! - YouTube\n\n\n(5) Linux vs Windows File System Structure Compared! - YouTube\n\n\n[Environment variables](Terminal Basics (kieranwood.ca)) (These often get used to make finding certain paths easier)\n\n\nFile System Formats ¬ß\nThis is the way in which the file system actually stores it‚Äôs data. This can impose limitations (like 4Gb file size limits for FAT32) and enable features (rolling backups/snapshots for BTRFS for some setups) depending on which you chose:\n\n\nNTFS vs FAT32 vs exFAT - Everything You Need To Know - YouTube\n\n\n(5) File Systems | Which One is the Best? ZFS, BTRFS, or EXT4 - YouTube¬†(Bit opinionated, particularly about raid)\n\n\n(5) Introduction to the Ext4 File System for Linux - YouTube\n\n\n(5) File Systems as Fast As Possible - YouTube\n\n\nDisplay Server ¬ß\nControls what you actually see, without this nothing will render to the screen (examples are x server and wayland). In order for a GUI to appear whatever application is running will need to run through the display server\n\n\nX Window System - YouTube\n\n\nWayland vs Xorg | Learn which one to choose - YouTube\n\n\nDesktop Environments ¬ß\nThe name given to the collection of systems that run to give a linux distribution it‚Äôs ‚Äúlook and feel‚Äù. This includes things like a start menu (or not), a search bar (or not), desktop icons (or not), taskbar/app dock (or not), the file explorer and many other features that make a distribution look and feel different. Note that sometimes distro‚Äôs with the same desktop environment will look different because they can often be styled with custom themes using CSS.\n\n\nGNOME, a very popular DE:¬†GNOME ‚Äì Simple, beautiful, elegant.\n\n\nKDE Plasma:¬†Plasma - KDE Community\n\n\nCinnamon:¬†Cinnamon (desktop environment) - Wikipedia,¬†video\n\n\nMATE:¬†MATE Desktop Environment | MATE (mate-desktop.org)\n\n\nXFCE:¬†Xfce Desktop Environment\n\n\nCutefish:¬†CutefishOS ‚Äì Cutefish OS Built on Ubuntu (cutefish-ubuntu.github.io),¬†How to install Cutefish Desktop in Ubuntu and derivatives (linuxcool.net)\n\n\nWindow Manager ¬ß\nControls the borders of GUI windows [the minimize, maximize and close buttons], as well as their positions and dimensions. These are usually part of desktop environments but you can install custom ones:\n\nWindow manager used by GNOME:¬†Enlightenment Main\nA fun tiling window manager I used to use in my edgy arch linux days:¬†https://github.com/qtile/qtile\nAnother Tiling window manager:¬†https://i3wm.org/\nAwesome:¬†https://awesomewm.org/\n\nFile Manager ¬ß\nWhat allows you to visually traverse your file system\n\n\nNemo:¬†Nemo (file manager) - Wikipedia,source\n\n\nDolphin:¬†Dolphin - KDE Applications\n\n\nNautilus (GNOME):¬†GNOME / Files ¬∑ GitLab\n\n\nHelpful reference videos ¬ß\n\n\nBrief Introduction to Computing Systems - User Space Processes, Shells, Kernels, and Hardware - CS1 - YouTube\n\n\nUnix system calls (1/2) - YouTube¬†&amp;¬†Unix system calls (2/2) - YouTube\n\n"},"Security-&-Cryptography/Basics":{"title":"üå±Basics/Intro","links":[],"tags":[],"content":"\n(A Detailed Guide to Digital Forensics: Tools, Scope, Jobs, and Competition | LinkedIn\n"},"Security-&-Cryptography/Samir-Secret-Sharing-(TODO)":{"title":"Samir Secret Sharing (TODO)","links":[],"tags":[],"content":"\nA beginner‚Äôs guide to Shamir‚Äôs Secret Sharing | by Keyless Technologies | Medium\nShamir‚Äôs secret sharing - Wikipedia\nShamir‚Äôs Secret Sharing Algorithm | Cryptography - GeeksforGeeks\n\n"},"Security-&-Cryptography/Whitehat,-Grey-Hat,-and-Black-Hat-Hacking":{"title":"White, Grey & Black Hat Hacking","links":[],"tags":[],"content":"When Talking about hacking there‚Äôs a few different common terms that come up. These terms convey the intent, permission &amp; motivations behind the way someone is hacking.\nLegality ¬ß\nAll hacking (including white hat) can be illegal in various ways, so don‚Äôt think just because you pick one of these that you‚Äôre free of legal scrutiny 1 2. This changes over time, and per country, but you should look into your legal risk before doing any work on systems in particular for any situation you should:\n\nAsk permission first before trying an exploit.\n\nImportantly you need to get in writing that you‚Äôre allowed to do what you‚Äôre doing. Even if someone hires you there should be a record, or they can say they never gave you permission.\n\n\nDisclose all exploits\n\nIf you come across an exploit while intentionally or unintentionally using an application you should disclose it. The two common types are responsible disclosure, and full3. Many places will have bug bounty programs exactly for this4 5\n\n\nDO NOT COLLECT DATA\n\nIf you are able to get data from a system do not store it. Storing stolen data is illegal in pretty much every country, especially user data\n\n\n\nDoing all of this does not guarantee you legal immunity, it‚Äôs just the best practices to avoid most legal issues. Some countries have stronger stances on this 6 7 than others8 and that will effect legality a lot as well.\nTypes of Disclosures ¬ß\nIt‚Äôs important to note when disclosing bugs there are 2 main types, public/full and responsible/private. Their names should give you some indication, but essentially a full disclosure is a disclosure of a bug publicly 9 10 11. The philosophy of this is that people deserve to know their devices are vulnerable. By disclosing publicly it forces the company to resolve the issues, unlike private disclosures, which can often take years and can lead to ‚Äúcatch and kill‚Äù.\nPrivate/responsible disclosures instead will report directly to the hardware/software developer directly so they can fix it without the knowledge of the public. This is often done through bug bounty programs where people are paid to find bugs. This also has the benefit of not allowing black hat hackers to use a bug while the developer is patching it.\nThere is a more in depth article on the ethics here.\nWhite Hat ¬ß\nThese are typically considered the ‚Äúgood guys‚Äù, the intention is to discover security vulnerabilities to help the affected systems, and importantly doing all this while they have permission to do so. White hat hackers would include people who are part of security analysis teams\nJust because white hat hackers have permission does not always mean they are free from legal issues. For example a polish train service hired hackers to look into issues with a train when their warranty expired, and they are now being threatened by the manufacturer12. Likewise agents working for governments of one country do not have permission from other countries for their work, and may find themselves being charged if they enter those countries.\nExamples ¬ß\n\nCompanies that offer to do paid penetration testing\n\nPenetration Testing Services | Pentesting | HackerOne\nPenetration Testing Services for Security | BreachLock\nWhite-hacking Services - White Hat Hacker Company - Enterprise Security - Kiss Software\n\n\nPolish Train DRM\n\nTechnical Details\nAdditional Sources, and legal threats\n\nTrains were designed to break down after third-party repairs, hackers find | Ars Technica\nHackers Hit With Legal Threats After They Fixed a ‚ÄòBricked‚Äô Polish Train (gizmodo.com)\n\n\n\n\n\nGrey Hat ¬ß\nThis is essentially where you are hacking ‚Äúfor good‚Äù, in a legally or ethically ambiguous way. This is someone for example who is working on a system without explicit permission. This means that you are operating in a ‚Äúgrey-area‚Äù, since you don‚Äôt intend to do something wrong, but this doesn‚Äôt mean you are in the clear.\nSome countries will ‚Äúupgrade‚Äù grey hat hacking to white hat hacking if people follow responsible disclosure paths 6 13. These laws change by country, but in some countries it is ‚Äúsafe‚Äù to test an exploit so long as you can demonstrate it‚Äôs sole purpose was to then disclose it to the company. Different countries have varying rules on this, but generally if you write up a disclosure (like a CVE) you can avoid the legal consequences. Realistically you should just go the ‚Äúwhite hat‚Äù approach first, and reach out before testing, however if you accidentally find a vulnerability in many cases you should be protected so long as you disclose it to the company that makes the software or hardware you‚Äôre using.\nExamples ¬ß\n\nGoogle cloud hacking\n\nGoogle Online Security Blog: Google Cloud Awards $313,337 in 2022 VRP Prizes (googleblog.com)\nHacking Google Cloud? (youtube.com)\n\n\nZuckerberg Facebook page hack\n\nZuckerberg‚Äôs Facebook page hacked to prove security exploit | CNN Business\n\n\nDan Kaminsky discovering Sony rootkit\n\nSony Numbers Add Up to Trouble (archive.org)\nSony BMG Rootkit Scandal: 10 Years Later | CSO Online\n\n\nTweetDeck XSS Vulnerability\n\nTweetDeck vulnerability lets attackers execute code remotely - The Verge\nThe breaches continued: Twitter‚Äôs TweetDeck Hacked | Indusface Blog\nTweetdeck vulnerability found by teen trying to code emoji heart | X | The Guardian\nHere‚Äôs how that major Tweetdeck vulnerability works - Vox\n\n\nStuxnet\n\nAn Unprecedented Look at Stuxnet, the World‚Äôs First Digital Weapon | WIRED\nStuxnet explained: The first known cyberweapon | CSO Online\nWhat Is Stuxnet? | Trellix\n\n\n\nBlack hat ¬ß\nBlack hat hackers are essentially the ‚Äúbad‚Äù side of hacking. This is people who are hacking illegally with the intention to be paid to exploit, and or sell exploits. Basically all forms of black hat hacking are illegal, including the less obvious forms like social engineering. It‚Äôs also important to be aware that in some countries even purchasing vulnerabilities can be considered illegal.\nExamples ¬ß\n\nNHS ransomware attacks\n\nNHS ransomware attack spreads worldwide - PMC (nih.gov)\nUK battles hacking wave as ransomware gang claims ‚Äòbiggest ever‚Äô NHS breach | TechCrunch\nNHS ransomware attack: what happened and how bad is it? | Cybercrime | The Guardian\n\n\nEbay 2016 XSS attacks\n\nXSS Flaw Exposed eBay Users to Phishing Attacks - SecurityWeek\nHackers still exploiting eBay‚Äôs stored XSS vulnerabilities in 2017 | Netcraft\neBay Falls Victim to Cross-Site Scripting Attack (bitdefender.com)\n\n\nSammy worm\n\nThe MySpace Worm that Changed the Internet Forever (vice.com)\nThe Tale of Samy The Worm.. One of the greatest moments in hacking‚Ä¶ | by Niall Leah | Medium\nSamy (computer worm) - Wikipedia\n\n\n\nAdditional Reference and resources ¬ß\n\nHacker‚Äôs Grimoire - Hacker‚Äôs Grimoire (gitbook.io)\nLiveOverflow - YouTube\nJohn Hammond - YouTube\n\nFootnotes ¬ß\n\n\nIt‚Äôs Now Scary to Be A White Hat Hacker Thanks to the US Government (futurism.com) ‚Ü©\n\n\nMERKBLATT White Hat Hacker EN.pdf ‚Ü©\n\n\nhttps://www.helpnetsecurity.com/2023/11/27/eddie-zhang-project-black-vulnerability-disclosure ‚Ü©\n\n\nGoogle Bug Hunters ‚Ü©\n\n\nMicrosoft Bounty Programs | MSRC ‚Ü©\n\n\nUS Justice Department won‚Äôt prosecute white-hat hackers under the CFAA | ZDNET ‚Ü© ‚Ü©2\n\n\nBelgium legalises ethical hacking: a threat or an opportunity for cybersecurity? - CiTiP blog (kuleuven.be) ‚Ü©\n\n\nLicense to hack? - Ethical hacking - Infosecurity Magazine (infosecurity-magazine.com) ‚Ü©\n\n\nmisc.ktemkin.com/fusee_gelee_nvidia.pdf ‚Ü©\n\n\nCVE - CVE (mitre.org) ‚Ü©\n\n\nZuckerberg‚Äôs Facebook page hacked to prove security exploit | CNN Business ‚Ü©\n\n\nhttps://gizmodo.com/hackers-hit-with-legal-threats-after-they-fixed-a-brick-1851097424 ‚Ü©\n\n\nhttps://www.justice.gov/opa/pr/department-justice-announces-new-policy-charging-cases-under-computer-fraud-and-abuse-act#:~:text=The%20policy%20for%20the%20first%20time%20directs%20that%20good%2Dfaith%20security%20research%20should%20not%20be%20charged. ‚Ü©\n\n\n"},"Security-&-Cryptography/low-level":{"title":"low-level","links":[],"tags":[],"content":"overflows ¬ß\n‚Ä¶\nMitigation ¬ß\n\nUse compiler flags for stack protection in GCC and Clang | Red Hat Developer\n\n"},"events/GDG-YYC":{"title":"GDG YYC","links":[],"tags":[],"content":"Notes from GDG YYC 2023, a google conference in Calgary Alberta.\nGoogle‚Äôs latest experiments in Labs\nAI ¬ß\n‚Ä¶\n\nGoogle AI\n\nFoundations ¬ß\n\nAttention is All You Need ‚Äì Google Research\n\nModels &amp; Tools ¬ß\n‚Ä¶\nGen AI studio ¬ß\n‚Ä¶\nGenerative AI Studio (google.com)\nMediapipe ¬ß\nMediaPipe ¬†|¬† Google for Developers\nMaker Suite ¬ß\nMakerSuite ¬†|¬† PaLM API ¬†|¬† Generative AI for Developers\nDuet AI ¬ß\n‚Ä¶\nIntroducing Duet AI for Google Workspace | Google Workspace Blog\nVertex AI ¬ß\n‚Ä¶\nOverview of Generative AI on Vertex AI ¬†|¬† Google Cloud\nUse cases\n\nSearch for documents/website\nChatbot/support bot\n\nBard ¬ß\n‚Ä¶\nPaLM2 ¬ß\n\nText generation\nGoogle AI: What to know about the PaLM 2 large language model (blog.google)\nGoogle AI PaLM 2 ‚Äì Google AI\nPathways language model\npapers\n\n[2204.02311] PaLM: Scaling Language Modeling with Pathways (arxiv.org)\nPathways Language Model (PaLM): Scaling to 540 Billion Parameters for Breakthrough Performance ‚Äì Google Research Blog\npalm2techreport.pdf (ai.google)\n\n\n\nDensely activated\n\n2207.02073v1.pdf (arxiv.org)\nDense Connections Explained | Papers With Code\n\n\nFew shot learning\n\nFew-Shot Learning | Papers With Code\nFew-shot learning - Wikipedia\nWhat Is Few Shot Learning? (Definition, Applications) | Built In\n\n\nUses compute optimal scaling compared to palm 1\n4 sizes\n\nsmallest runs on phone (gecko)\n\n\nPaLM powers bard and google workspace\nUse cases\n\nMed-PaLM (research.google)\nGoogle Launches Generative AI for Cybersecurity (analyticsvidhya.com)\n\n\nData toxicity\n\nRacism\nsexism\netc.\nGoogle I/O 2023: PaLM 2 Debut Shows Language Model Progress (futurumgroup.com)\n[2309.06415] Down the Toxicity Rabbit Hole: Investigating PaLM 2 Guardrails (arxiv.org)\n\n2309.06415v2.pdf (arxiv.org)\n\n\nGoogle‚Äôs PaLM 2 paper shows that text-generating AI still has a long way to go | TechCrunch\nThe Real-World Harms of LLMs, Part 2: When LLMs Do Work as Expected (arthur.ai)\n\n\n\nGemini ¬ß\n\nWhat is Google Gemini? The next-generation AI model explained (trustedreviews.com)\n\nImagen ¬ß\n‚Ä¶\ntext-to image\nChirp ¬ß\n‚Ä¶\ntext-to-speech and vice-versa\nCodey ¬ß\n‚Ä¶\ncode\nEmbeddings ¬ß\n‚Ä¶\ntake image and text content and be able to search through it\nClaude 2 ¬ß\nAnthropic \\ Claude 2\nCloud/Devops/ Platform engineering ¬ß\n‚Ä¶\nInstead of devops where a request comes in, something is setup and then each group has their own setup you have more of a self-service option that has standardized solutions.\nFor example in a typical devops solution a team would request version control management, the devops team spins up and configured GitLab for their request, and if they want to use Jenkins as a CI/CD runner then Jenkins is setup for them ad-hoc.\nIn a platform engineering solution a team would fill out a form and pick the standard tool to instantiate (GitLab in this case), then they request to implement Jenkins into GitLab, which then is built out as a standard solution which can be used for any and all teams that want them. In this way the platform itself is a self-service product that allows people to pick what they want, then the devops team helps work with clients to build out solutions, then platform engineers will maintain the platform and it‚Äôs standard services.\n\nBadal.io\n\nStartups ¬ß\n\nGoogle for Startups Cloud Program ¬†|¬† Google Cloud\nStart, build, grow: Tools, resources and support programs for startups - Google for Startups\nWhat Matters: What is an OKR? OKR Meaning, Definition &amp; Examples | What Matters\nUse OKRs to Set Goals for Teams, Not Individuals (hbr.org)\n"},"index":{"title":"Welcome!","links":["/"],"tags":[],"content":"About the Site ¬ß\nWelcome to my computer science KB. The purpose of this project is to be a knowledge base for all things computer science. Most of this is information I have come across and used. The information is broken up into various sections by field to make it easy to find things, but also don‚Äôt be afraid to use the search bar since the site has full-text search to make finding whatever you need as easy as possible!\nNavigation ¬ß\nWhen navigating through to any new topic in the knowledge base I would recommend checking out the page labelled üå±Basics/Intro in each section.  From there there is also (on desktop) a graph view in the top right (should be at the bottom of the page on mobile) to see which pages are related to the current page. Many times the related pages are in different sections and are worth checking out when they come up.\nAbout Me ¬ß\nHi üëã, I‚Äôm Kieran.\nI‚Äôm currently a computer science student with a minor in philosophy at the university of Calgary in Canada. I‚Äôve been developing since I started my degree professionally as both a freelancer and full-time employee, as well as doing open source work. If you‚Äôre interested in some of my other projects check out some of the links in the footer of the site!"},"programming/Abstraction-(TODO)":{"title":"Abstraction (TODO)","links":[],"tags":[],"content":"‚Ä¶\nRelated talks ¬ß\n\nPreventing the Collapse of Civilization / Jonathan Blow (Thekla, Inc) (youtube.com)\nAbstraction Can Make Your Code Worse (youtube.com)\nClean Code : Horrible Performance | Full Interview (youtube.com)\nPrime Reacts: The Flaws of Inheritance (youtube.com)\nThe Art of Abstraction - Computerphile (youtube.com)\nWhat is abstraction (youtube.com)\nWhere Does Bad Code Come From? (youtube.com)\nRust: Turtles all the way down - YouTube\n"},"programming/Advanced-Data-Structures-(TODO)":{"title":"Advanced Data Structures (TODO)","links":["programming/Programming-Paradigms-(TODO)","programming/Hashing"],"tags":[],"content":"Struct ¬ß\n‚Ä¶\nInterface ¬ß\n‚Ä¶\nClass ¬ß\n‚Ä¶\nEnumerator ¬ß\n‚Ä¶\nIterators ¬ß\n‚Ä¶\nRecursive Types ¬ß\n‚Ä¶\nTrees ¬ß\nThis is a computer science concept that comes up a lot. The basics are that a graph/tree is a collection of nodes that are linked together. Nodes can represent anything, but usually they represent an object in a hierarchy. A hierarchy is just a fancy name for a structure that shows categories that are related in some way to all of the categories beneath them. This means tree‚Äôs will have a ‚Äústarting point‚Äù from which the other Nodes flow from (called the root). For example when talking about a location you might have a hierarchy that looks like this:\nflowchart TD\n¬† ¬† a{Continent} &amp; b{Country} &amp; c{Province} &amp; d{City}\n¬† ¬† a --contains--&gt; b --contains--&gt;c --contains--&gt; d\n\n\nWhere the overall category is A location from there you have continents, which contain countries, which contain provinces, which contain cities. In code this can be done using an object (object oriented), or Struct (Procedural). For example to represent some cities in Canada we could have:\nflowchart TD\n¬† ¬† A(North America)\n¬† ¬† B(Canada)\n¬† ¬† C(Alberta)\n¬† ¬† D(British Columbia)\n¬† ¬† E(Ontario)\n¬† ¬† A --&gt;B\n¬† ¬† B --&gt; C &amp; D &amp; E\n¬† ¬† C --&gt; CA(Calgary) &amp; CB(Edmonton)\n¬† ¬† D --&gt; DA(Vancouver) &amp; DB(Revelstoke)\n¬† ¬† E --&gt; EA(Toronto) &amp; EB(Ottawa)\n\nWe can then represent it by having a Node class or Struct. We‚Äôre going to represent the subtree of BC:\nflowchart TD\n¬† ¬† A(North America)\n¬† ¬† B(Canada)\n¬† ¬† D(British Columbia)\n¬† ¬† A --&gt;B\n¬† ¬† B --&gt; D\n¬† ¬† D --&gt; DA(Vancouver) &amp; DB(Revelstoke)\n\nhere is the pseudocode for each:\n// Struct Version\nStruct Node{\n\tlabel: String\n\tparent: Null or List of Node&#039;s\n\tchild: Null or List of Node&#039;s\n}\n\n// Class Version\nClass Node:\n\tlabel: String\n\tparent: Null or List of Node&#039;s\n\tchild: Null or List of Node&#039;s\n\n\n// Using either\n\n/// Create Children\nvancouver = Node(&quot;Vancouver&quot;, Null, Null)\nrevelstoke = Node(&quot;Revelstoke&quot;, Null, Null)\n\n/// Create Parent node with children\nbc = Node(&quot;British Columbia&quot;, Null, [vancouver, revelstoke])\n\n/// Add parent to children\nvancouver.parent = bc\nrevelstoke.parent = bc\n\n/// Create parent Node with children\ncanada = Node(&quot;Canada&quot;, Null, [bc])\n\n/// Add parent to children\nbc.parent = canada\n\n/// Create parent Node with children\nna = Node(&quot;North America&quot;, Null, [canada])\n\n/// Add parent to children\ncanada.parent = na\n\nThis is a useful visualization because each edge (arrow/line) tells you what the node is related to. So if we later want to check what cities are in Canada, we go to the Canada node, and then search all the children, then the children‚Äôs children:\ncities = []\nfor province in canada.children{\n\tfor city in province.children{\n\t\tcities.add(city)\n\t}\n}\n\nThis also means unlike just a traditional list/array if our model expands we have to update very few nodes. For example let‚Äôs say we become space fairing, and as part of that our location tree now needs to specify which planet we‚Äôre talking about. To add that node we simply add in the Planet node, and then attach the continent node to the planet (updating 1 reference in our case).\nflowchart TD\n¬† ¬† AA{Planet} &amp; a{Continent} &amp; b{Country} &amp; c{Province} &amp; d{City}\n¬† ¬† AA --Contains--&gt;  a --contains--&gt; b --contains--&gt;c --contains--&gt; d\n\n\nUses &amp; references:\n\nMaking categories simpler | Schulich Ignite\nThe DOM\n\nUnderstanding the DOM ‚Äî Document Object Model | DigitalOcean\nDOM tree (javascript.info)\n\n\nThe power of paths | Schulich Ignite\nApplications of tree data structure - GeeksforGeeks\nReal World Examples of Tree Structures | Baeldung on Computer Science\n\nGraphs ¬ß\nGraphs are similar to the ideas behind Trees, except graphs are not heirarchical. They are used in many problems to help model real life situations like maps, networks and puzzles. Here is an example of a graph:\nflowchart LR\n    A((Vertex))\n    b((Vertex))\n    c((Vertex))\n    d((Vertex))\n    e((Vertex))\n    f((Vertex))\n    A ---- c\n    c ---- d\n    b ---- c\n    e ---- c\n    b ---- A\n    f ---- d\n\nThe circles are ‚Äúvertices‚Äù and they are similar to Nodes in Trees, each vertex connects to other vertices via edges (the lines). The graph above is an undirected, and unweighted graph. This implies that whatever it‚Äôs representing allows you to ‚Äútravel‚Äù back and forth between any two connected vertices. If I gave them labels now:\nflowchart LR\n    a((a))\n    b((b))\n    c((c))\n    d((d))\n    e((e))\n    f((f))\n    a ---- c\n    c ---- d\n    b ---- c\n    e ---- c\n    b ---- a\n    f ---- d\n\nThese are pretty easy to represent in code, using Structs pr classes we can do:\n// Struct Version\nStruct Vertex{\n\tlabel: string\n\tedges: Null or list of Verticies\n}\n\n\nStruct UndirectedGraph{\n\tVerticies: List of Verticies\n}\n\n\n// Class version\nClass Vertex{\n\tlabel: string\n\tedges: Null or list of Verticies\n}\n\n\nClass UndirectedGraph{\n\tVerticies: List of Verticies\n}\n\n// Create Verticies\na = Vertex(&quot;a&quot;, Null)\nb = Vertex(&quot;b&quot;, Null)\nc = Vertex(&quot;c&quot;, Null)\nd = Vertex(&quot;d&quot;, Null)\ne = Vertex(&quot;e&quot;, Null)\nf = Vertex(&quot;f&quot;, Null)\n\n// Add edges\na.edges = [b, c]\nb.edges = [a, c]\nc.edges = [a,b,e,d]\nd.edges = [c,f]\ne.edges = [c]\nf.edges = [d]\n\n// Create Graph\nUndirectedGraph([a,b,c,d,e,f])\n\n\nUses:\n\nSocial Media analysis\n\nA brief introduction to Social Network Analysis | by Emre Y√ºksel | Medium\nLec3_network_statistics_handout.pdf (unb.ca)\n2.3 Symmetric Relations and Undirected Graphs | Social Networks: An Introduction (bookdown.org)\n\n\nRecommendation engines\n\nGraph-Based Product Recommendation | DSC180B Capstone Project on Graph Data Analysis (nhtsai.github.io)\nMicrosoft Word - Final_Report_6.docx (stanford.edu)\nRecommendation System using Knowledge Graphs and Machine Learning | by Sahil Sheikh | Medium\n\n\nNetwork analysis\n\nNetworksSlides.pdf (stanford.edu)\n14.15J / 6.207 Networks, Lectures 2 &amp; 3 Graphs, Measures, and Metrics (mit.edu)\n\n\nSearching &amp; Pathfinding\n\ngs.pdf (stanford.edu)\nGraph Search Algorithms - Developer Guides (neo4j.com)\nDepth First Search Algorithm | Graph Theory (youtube.com)\nBreadth First Search Algorithm | Shortest Path | Graph Theory (youtube.com)\n5.1 Graph Traversals - BFS &amp; DFS -Breadth First Search and Depth First Search (youtube.com)\nGraph Theory and Searching Algorithms (BFS, DFS) - Algorithms &amp; Data Structure #14 (youtube.com)\nDepth-First Search Visualization (usfca.edu)\nBreadth-First Search (usfca.edu)\n\n\n\nDirected Graphs ¬ß\nWe could start using them to describe something useful. Let‚Äôs say each letter is a house, and Alice (who lives at a) wants to get to Bob (who lives at f) we could now use this structure to describe a path for Alice to get to Bob, like for example a -&gt; b -&gt; c -&gt; e -&gt; c -&gt;d -&gt; f:\nflowchart LR\n    a((a))\n    b((b))\n    c((c))\n    d((d))\n    e((e))\n    f((f))\n    a --&gt; b --&gt; c --&gt; e --&gt; c --&gt;d --&gt; f\n\nNow that we‚Äôve added arrows, the graph above is called a directed graph, since you can only go in the direction the arrow heads tell you to. In this case, because we‚Äôve laid it out this way we can clearly see this is an inefficient path, it‚Äôs much faster to skip e entirely, and do something like this:\nflowchart LR\n    a((a))\n    b((b))\n    c((c))\n    d((d))\n    f((f))\n    a --&gt; b --&gt; c --&gt;d --&gt; f\n\nIn fact if we look at our original graph there‚Äôs an even shorter path if we skip b as well:\nflowchart LR\n    a((a))\n    c((c))\n    d((d))\n    f((f))\n    a --&gt;  c --&gt;d --&gt; f\n\nWe can describe all these in code again using Structs pr classes:\n// Struct Version\nStruct Edge{\n\tto: Vertex\n}\n\nStruct Vertex{\n\tlabel: string\n\tedges: Null or list of Edge&#039;s\n}\n\n\nStruct DirectedGraph{\n\tVerticies: List of Verticies\n}\n\n\n// Class version\nClass Edge{\n\tto: Vertex\n}\n\nClass Vertex{\n\tlabel: string\n\tedges: Null or list of Edge&#039;s\n}\n\n\nClass DirectedGraph{\n\tVerticies: List of Verticies\n}\n\n// Create Verticies\na = Vertex(&quot;a&quot;, Null)\nb = Vertex(&quot;b&quot;, Null)\nc = Vertex(&quot;c&quot;, Null)\nd = Vertex(&quot;d&quot;, Null)\ne = Vertex(&quot;e&quot;, Null)\nf = Vertex(&quot;f&quot;, Null)\n\n// Add edges\na.edges = [Edge(b)]\nb.edges = [Edge(c)]\nc.edges = [Edge(e), edge(d)]\ne.edges = [Edge(c)]\nd.edges = [Edge(f)]\n\n// Create Graph\nDirectedGraph([a,b,c,d,e,f])\n\n\nUses:\n\nPagerank (how google used to pick which pages to show)\n\nGoogle‚Äôs PageRank Algorithm Explained with Examples | Georgia Tech CSE6242 (youtube.com)\n\n\nNetwork Flow Analysis\n\nMax Flow Ford Fulkerson | Network Flow | Graph Theory (youtube.com)\n\n\nSearching &amp; Pathfinding\n\ngs.pdf (stanford.edu)\nGraph Search Algorithms - Developer Guides (neo4j.com)\nDepth First Search Algorithm | Graph Theory (youtube.com)\nBreadth First Search Algorithm | Shortest Path | Graph Theory (youtube.com)\n5.1 Graph Traversals - BFS &amp; DFS -Breadth First Search and Depth First Search (youtube.com)\nGraph Theory and Searching Algorithms (BFS, DFS) - Algorithms &amp; Data Structure #14 (youtube.com)\nDepth-First Search Visualization (usfca.edu)\nBreadth-First Search (usfca.edu)\n\n\n\nWeighting (TODO) ¬ß\nAll the graphs we‚Äôve seen so far have been unweighted.\nRopes ¬ß\n‚Ä¶\n\nRope Datastructure (youtube.com)\nRead a paper: Ropes‚Äî an alternative to Strings (youtube.com)\n\nCollections ¬ß\n‚Ä¶\nGap Buffers ¬ß\nGap buffer - Wikipedia\nHashmaps/dictionaries/hashtables ¬ß\nDetails about these data structures can be found in the dedicated page on Hashing\nAdditional References ¬ß\n\nMIT 6.851 Advanced Data Structures, Spring 2012 - YouTube\nLearn Data Structures and Algorithms for free üìà (youtube.com)\n"},"programming/Algorithms-&-Complexity-(TODO)":{"title":"Algorithms & Complexity (TODO)","links":["Programming/Basics"],"tags":[],"content":"Simple patterns (TODO) ¬ß\nThese patterns are ones you will often see people do even if they‚Äôve never looked at algorithms before.\nString Building (TODO) ¬ß\nThe idea of the string builder pattern is to treat a string like an list and continuously push substrings into the string in order to build the result slowly.\nAdditional Resources ¬ß\n\nEverything Is Fast For Small n (codinghorror.com)\n"},"programming/Basics":{"title":"üå±Basics/Intro","links":["programming/python","programming/Abstraction-(TODO)","programming/Binary-and-Hexadecimal-(TODO)","OS-&-Firmware/Basics","programming/Compilers-(TODO)","programming/Advanced-Data-Structures-(TODO)","programming/Hashing"],"tags":[],"content":"This section will talk about basic programming concepts, if you want the easiest way to start programming I would look into the python section, which will detail how to use python for all these concepts. This section covers programming more holistically, and will be more difficult than just learning a language to start with.\nProgramming Languages ¬ß\nComputers communicate using electrical signals, these signals are then abstracted into binary. This allows programmers to control these signals in easier to work with ways. Programming languages are built on top of layers and layers of existing firmware and operating systems. Programming languages let you define programs (also called applications or binaries) that run in order to do something. Anything you run on your electronic devices today is the result of a programming language.\nSource Code, Binaries, and scripts ¬ß\nSource code are the actual files a programmer works with to create binaries. Binaries (not to be confused with binary) are software that can be run by a computer. The source code is essentially an easily readable set of instructions, which the computer then compiles (using a compiler) into ‚Äúmachine code‚Äù, which is what the computer then actually runs. Binaries are also called:\n\napplications, or apps\nscripts\nexecutables or execs\n\nPseudocode ¬ß\nFor this section I will use Pseudocode, this is a fancy name for ‚ÄúI don‚Äôt want to write real code‚Äù. Essentially it will be a mix of code syntax and plain English to make it easy to read. It also lets me explain topics and syntax from multiple language at once.\nCompiled vs interpreted (TODO) ¬ß\n‚Ä¶\nREPL (TODO) ¬ß\n‚Ä¶\nBytecode (TODO) ¬ß\n‚Ä¶\nComments ¬ß\nComments are what they sound like, they don‚Äôt do anything and they‚Äôre there to let you add comments for yourself and other developers to read. This can be handy (especially when starting) to provide information that is not easily ascertainable by the code. A comment can be on it‚Äôs own line, or ‚Äúinline‚Äù. inline comments will go after some code. Comments can also be single-line, or multiline. In the example below the comment character will be //, which means anything after // will be a comment. For example:\n// This is a signle line comment\n\nsome_code // This is an inline comment\n\nHowever there are various different comment characters that are used for example:\n# This is jused in python, bash, YAML etc.\n// This is used in C, Rust, Javascript etc.\n-- This is used in SQL, Haskell etc.\n&lt;!-- This is used in HTML, XML etc. --&gt;\n; This is a comment in assembly, etc.\n! This is a comment in FORTRAN, etc.\n% This is a single line comment in Erlang, LaTeX, etc.\n\nAnd multiline comments can be different:\n&quot;&quot;&quot;This is a multiline comment in\n\t- python\n&quot;&quot;&quot;\n/* This is a multine comment in\n\t- C\n\t- Rust\n\t- Javascript\n\t- CSS\n\t- etc.\n*/\n{-- This is a multiline comment in\n\t- Haskell\n--}\n\n\nFor my pseudocode I will use // for comments and /* */ for multiline comments.\nVariables (TODO) ¬ß\nWhen working with code you will inevitably want to store some information. To store information we use variables. Variables are basically labels we can use to refer to information more easily. Different languages have different rules about how to create variables, and how to use them, but every language has variables in some form.\nAssignment and initialization ¬ß\nWhen you want to use a variable you need to create it. The simplest form of this in many programming languages is to put the label (variable name) on the left, and then an = and then the value. For example:\nname = kieran\n\nYou  can then typically reference this later in the file using the label. For example here might be some math:\nx = 4\ny = 3\n\nz = x + y // z is 7\n\nMutability ¬ß\nMutability is the concept that you can change variables. Some types of data you store are able to be mutated so that their content can be changed, others cannot. If a variable cannot be changed it is called an immutable variable. For example here is a mutable variable:\nx = 4\n\nx = 5\n\nIn some languages (like rust) values are immutable by default and you have to specify mutable values.\nmut x = 5 // x can be mutated\n\ny = 5 // y is immutable\n\nConstants and immutable values ¬ß\nConstants exist in some languages, constants cannot be updated regardless of the type used. These are good for things that don‚Äôt change (like the value of PI, or the gravitational constant). Most languages your variables are mutable. In these languages you can sometimes specify variables as immutable with constants, or other language constructs like readonly:\nreadonly x = 5\n\nconst PI = 3.14159\n\nScoping (TODO) ¬ß\nVariables don‚Äôt exist forever. If they did then long running programs would be very inefficient. What programming languages do instead is they scope variables, so they get deleted when they‚Äôre no longer needed. The scoping rules, and how they apply differ by language.\nThis also helps to avoid some common issues that might come up with variables. For example lets say you have some code that uses the variable name then later you have some code that also uses name. In this case whichever one comes last would override the other. However if they are in different scopes, then they can be used independent of one another. Often for example you can have a program where name is used in one file, and name is used in antother file, but since the variables are scoped to each file they don‚Äôt conflict. For example:\nfile1.name // Kieran\n\nfile2.name // Jamie\n\nIn this case code in file1 will get Kieran when they use name and file2 would get Jamie when they use name. Scoping is also heavily tied to Functions (TODO).\nData Types (TODO) ¬ß\nNot all data is formatted the same. Data types are the basic building blocks that let you define what data looks like. It gives information about what you‚Äôre trying to store and effects performance, and what information you can put in a variable\nDynamic vs Strict Typing ¬ß\nDynamic languages will allow you to create variables without stating a data type explicitly, instead they are inferred, for example:\nx = 4\ny = 3\n\nz = x + y // z is 7\n\nIn this case the type of the data is inferred meaning when x is assigned to 4 it‚Äôs inferred to be an Integer (TODO). In other languages you have to explicitly state the data type. If you have to state the type it‚Äôs referred to as static typed, whereas ones without needing to specify the type are called dynamic typed (or duck typed sometimes). For static languages, this is an example of how you define a variable:\n// type label = value\nint x = 4 // Rust, C and other languages use this format\n\n// label:type = value\nx:int = 4 // Typescript and others use this format\n\nSome languages can let you specify when you want to infer vs be strict. For example in go := means assign a variable and infer it‚Äôs type:\n// Explicit typing\nint x = 4\n\n// Inferred tpye\nx:= 4\n\nSome languages will also allow you to declare a variable without a value, which can be initialized with a value later. For example:\nint x\n\nx = 4\n\nPrimitive vs Derived types ¬ß\nPrimitive types are data types that are included by default in most languages. They are the essential data types used to build programs. Every type we cover in this section will be a primitive type. A derived type is a type that is programmer created and not part of the language. You can create these using classes/structs/enums.\nInteger ¬ß\nIntegers are normal whole numbers (no decimals). So for example here are some integers:\nx = 5\ny = 32\nz = -256\nq = 0\n\nIn many languages you will find integers being referred to as int.\nSizing ¬ß\nIntegers are often split up by sizes. This can help massively with optimization, but can make things more complicated. In languages that specify them usually there will be an i with a number. This number will typically indicate the bits:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymbolDescriptionMin and Maxi88 bit integer (1 byte)-128 to 127i1616 bit integer-32,768 to 32,767i3232 bit integer-2,147,483,648 to 2,147,483,647In some languages they instead have short, long, long long and other shorthands for integers. You would need to lookup the specifics in each language to find these, but typically they will correspond to a number that has a certain number of bits.\nSigned vs Unsigned ¬ß\nAn unsigned integer is an integer that can only be positive. A signed integer is an integer that can be  positive or negative. In many programming languages you will see an unsigned integer as starting with U:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymbolDescriptionMin and Maxu88 bit integer (1 byte)0 to 255u1616 bit integer0 to 65,535u3232 bit integer0 to 4,294,967,295As you can see compared to the signed integers above, unsigned integers can hold larger numbers for the same number of bits.\nFloat/Floating Point (TODO) ¬ß\n‚Ä¶\nArray‚Äôs &amp; Lists (TODO) ¬ß\n‚Ä¶\nBooleans ¬ß\nBooleans are values that indicate if something is true or false. These can be used in conjunction with Conditionals (TODO) to tell a program what to do.\nA trivial example would be the current season:\nis_summer = False\nis_winter = False\nis_fall = False\nis_spring = True\n\nBased on this the program might use a conditional to show a certain theme based on the current season. This can also be used for things like user settings:\ndark_theme = true\n\nIn some languages (like C &amp; python) booleans are actually just integers. For example here are the various representations of true and false in different languages:\n// True\ntrue\nYes\n1\nTRUE\nTrue\n\n// False\nfalse\nNo\n0\nFALSE\nFalse\n\nTruthyness ¬ß\nIn many languages you can do checks against values of other data types to see how ‚Äútruthy‚Äù they are. This is usually done to indicate if a value is ‚Äúempty‚Äù or not. For example:\n&quot;&quot; // Would be false because it&#039;s an empty string\n0  // Would be false because it&#039;s 0\n[] // Would be false because it&#039;s empty\n\nMappings (dictionaries, hash-maps, associative arrays) ¬ß\n\nHow to use\nWhen to use\nJSON\n\nDetails about hashing in general, and these data structures can be found in the Hashing page. Additionally a blog post about creating these data structures from scratch can be found here.\nNull, None &amp; undefined types (TODO) ¬ß\n‚Ä¶\nConditionals (TODO) ¬ß\n‚Ä¶\nFunctions (TODO) ¬ß\n‚Ä¶\nAnatomy of functions (TODO) ¬ß\n‚Ä¶\nThere are 2 popular forms of enforcing variable scopes, indentation and {}. To illustrate this point let‚Äôs look at an example:\nx = 5\n\nfunction {\n\tx = 3\n}\n\n\nReturns (TODO) ¬ß\n‚Ä¶\nRecursion (TODO) ¬ß\n‚Ä¶\nEffect on scopes ¬ß\nAs mentioned earlier functions have an impact on Scoping (TODO). For example there‚Äôs a separate scope inside a function:\nx = 5\n\nfunction doStuff(){\n\tx = 3\n\t// x is 3\n}\n// x is 5\n\n\nSome languages will allow you to modify values in outer scopes, and in those cases x would be 3. But in most languages x would be 5 at the second comment. Look into the language specifics of your language to understand this."},"programming/Binary-and-Hexadecimal-(TODO)":{"title":"Number Systems (binary & hex)","links":["programming/Algorithms-&-Complexity-(TODO)"],"tags":[],"content":"When we count we traditionally use base 10. Base 10 gives us 10 values before we shift digits. We go from 0-9, and then we shift 1 digit left, and start from 0 in the far right column again:\n0\n1\n2\n...\n9\n10\n11\n...\n19\n20\n21\n...\n99\n100\n\nIf we pad the left hand side of the columns with 0‚Äôs (which doesn‚Äôt change the value) this pattern becomes more apparent:\n\nWe end up essentially with a table. So if we think about it the number 123 is actually:\n\n1 one hundred\n1 twenty\n1 three\n\nEach representing the hundreds, tens and one‚Äôs columns of the above table. As such when a value ‚Äúspills over‚Äù it increases the digit by adding 1 to the left column of whatever overflows.\nPowers of 10 decimal ¬ß\nAnother way to view this is in powers of 10. I have put the minimum value of each column on top, and the maximum below:\n\nThis same model will be used later to help explain other base numbering systems like binary and hex.\nBinary ¬ß\nComputers communicate using electrical signals. With these electrical signals we can represent 2 states, on and off. If the voltage is above 5v we can call it ‚Äúon‚Äù or ‚Äútrue‚Äù, and if the voltage is below that we can call if ‚Äúoff‚Äù or ‚Äúfalse‚Äù. With this system it lends itself towards binary. Binary is a base 2 numbering system. Base 2 means instead of 0-9 we have only 2 values, 1 and 0. In binary these 1‚Äôs and 0‚Äôs are called bits. We can have different sized binary numbers. For example this is a 4 bit binary number 0110 (6 in decimal), or an 8 bit number 01100110 (102 in decimal), 8 bits is traditionally called a byte.\nWhen you first start looking at the numbers, binary is easiest to think of as a kind of truth table format. Let‚Äôs start with an example, the number 123 is 0b1111011. the 0b is a base indicator, when we write numbers we need to know what system we‚Äôre using, the b indicates we‚Äôre in binary. So 123 is  1111011. How do we do this conversion?\nConverting decimal numbers to binary ¬ß\nFirst we need to construct a table like we saw with the Powers of 10 decimal representation we‚Äôre going to start from 2^0, and we want to go to 2^x where x is the largest power of 2 that does not exceed our number. For 123 2^7 = 128 which is larger than 123, so 2^6 is the magic number we want. For the steps I will include 2^7 to help show the steps clearly, but this wastes 1 bit of space storing our number. So let‚Äôs build our table:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2^72^62^52^42^32^22^12^0\nWhich we can convert to whole numbers from the exponents to make it easier:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1286432168421\nThere is a video walkthrough of this section if you are interested.\n\nThe continuous subtract Algorithm ¬ß\nAs we saw with decimal earlier, we can break up numbers into their constituent parts, so for 123 it‚Äôs 1 one hundred 2 tens (twenty) and 3 ones (three). Now we have the table we are going to do the same, but broken up into powers of 2. Our algorithm for creating a binary number from a decimal is:\n\nKeep track of a value called remainder, at the start remainder is equal to our decimal number\nStart from the far left of the table for each cell\n\nif remainder &lt; current cell: put a 0 and go one cell to the right\nelse: put a 1 subtract the current cell value from remainder, and then move to the right\n\n\nContinue step 2 until you reach the end of the table.\n\nYou can do this by building a string, and converting it back to a number later. The pseudocode for this would be:\nfunction convertToBinary(number){\n  remainder = number\n  \n  // Assume 8 bits\n  cells = [128,64,32,16,8,4,2,1]\n\n  result = &quot;0b&quot; // Where we will add bits 1 at a time to\n  \n  for currentCell in cells{\n    if remainder &lt; currentCell{\n      result.append(&quot;0&quot;)\n    } else {\n      result.append(&quot;1&quot;)\n      remainder = remainder - currentCell\n    }\n  }\n  \n  // Some function to take the string representation and convert to a number\n  return stringToBinary(result) \n  \n}\n\n\n\nFor example the algorithm in python:\ndef convert_to_binary(number:int) -&gt; str:\n  remainder = number # Step 1\n \n  # Assume 8 bits\n  cells = [128,64,32,16,8,4,2,1]\n  result = &quot;0b&quot; # Where we will add bits 1 at a time to\n \n  for currentCell in cells:\n    if remainder &lt; currentCell: # Step 2.1\n      result += &quot;0&quot;\n    else: # Step 2.2\n      result += &quot;1&quot;\n      remainder = remainder - currentCell\n  return result\n \nx = convert_to_binary(123) # 01111011\n \n# Converts back to decimal\nint(x, 2) # 123\n \n# Can also create an int from a binary number\n0b01111011 == 123\nFirst Cell\nSo to start:\nRemainder = 123\nCurrent Cell = 128\nremainder &lt; Current Cell\n\nSo we follow step 2.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n12864321684210\nSecond Cell\nNext:\nRemainder = 123\nCurrent Cell = 64\nremainder &gt; Current Cell\n\nSo we follow step 2.2\nremainder = remainder - Current Cell\n          = 123 - 64\n          = 59\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n128643216842101\nThird Cell\nNow we continue:\nRemainder = 59\nCurrent Cell = 32\nremainder &gt; Current Cell\n\nSo we follow step 2.2\nremainder = remainder - Current Cell\n          = 59 - 32\n          = 27\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1286432168421011\nFourth Cell\nRemainder = 27\nCurrent Cell = 16\nremainder &gt; Current Cell\n\nSo we follow step 2.2\nremainder = remainder - Current Cell\n          = 27 - 16\n          = 11\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n12864321684210111\nFifth Cell\nRemainder = 11\nCurrent Cell = 8\nremainder &gt; Current Cell\n\nSo we follow step 2.2\nremainder = remainder - Current Cell\n          = 11 - 8\n          = 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n128643216842101111\nSixth Cell\nRemainder = 3\nCurrent Cell = 4\nremainder &lt; Current Cell\n\nSo we follow step 2.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1286432168421011110\nSeventh Cell\nRemainder = 3\nCurrent Cell = 2\nremainder &gt; Current Cell\n\nSo we follow step 2.2\nremainder = remainder - Current Cell\n          = 3 - 2\n          = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n12864321684210111101\nEighth Cell\nRemainder = 1\nCurrent Cell = 1\nremainder &gt; Current Cell\n\nSo we follow step 2.2\nremainder = remainder - Current Cell\n          = 1 - 1\n          = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n128643216842101111011\nSo we‚Äôre now left with 01111011, and we just add our indicator to the front and we have 0b01111011. Here‚Äôs a familiar way to visualize this process:\n\nYou know you‚Äôve done it right if your remainder is 0.\nConverting binary numbers to decimal ¬ß\nNow we‚Äôve seen how to convert number to binary, let‚Äôs see about how to convert numbers from binary to decimal.\nThe continuous add Algorithm  (TODO) ¬ß\nNow we have the table our algorithm for creating a binary number from a decimal is:\n\nKeep track of a value called result, at the start result is equal to 0\nStart from the far right of the table for each cell\n\nif the value is a 1, add the value of the current cell to result\nIf the value is 0, go to the next cell\n\n\nContinue step 2 until you reach the end of the table\n\nThe pseudocode for this would be:\nfunction convertToInteger(binary_number){\n  remainder = number\n\n  // Assume 8 bits\n  cells = [1,2,4,8,16,32,64,128]\n\n  // Create an array of the 0&#039;s and 1&#039;s of the number\n  values = binary_number.split(&quot;&quot;) \n\n  result = 0 // Where we will add 1 cell at a time\n\n  // Iterate the cells and values at the same time\n  for value, currentCell in values, cells{\n\t if value == 1{\n\t\t result += currentCell\n\t } \n    \n  }\n  \n  return result\n}\n\nconvertToInteger(&quot;01111011&quot;)\n\nFor example the algorithm in python:\ndef convert_to_decimal(number:str) -&gt; int:\n  result = 0 # Step 1\n \n  # Assume 8 bits\n  cells = [128,64,32,16,8,4,2,1]\n  cells = cells[::-1] # Reverse cells (simulates iterating from the right to left)\n \n  number = number.replace(&quot;0b&quot;,&quot;&quot;) # Remove binary indicator\n \n  for index, currentCell in enumerate(cells): # Step 2\n      if index == len(number): # Is at end\n          break  # Break so we don&#039;t double-add last value\n \n      # Get current Value from end of list\n      if number[-1*(index+1)] ==&quot;1&quot;: # Step 2.1 \n          result += currentCell\n  return result\n \nx = bin(0b01111011)\n \nconvert_to_decimal(x) # 123\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n128643216842101111011\nSo we start with 0b01111011\n\nSigned vs Unsigned (TODO) ¬ß\n‚Ä¶\nDecimals and Fractions (TODO) ¬ß\n‚Ä¶\nOperations in Binary ¬ß\n‚Ä¶\nAddition ¬ß\n‚Ä¶\nSubtraction ¬ß\n‚Ä¶\nMultiplication ¬ß\n‚Ä¶\nDivision ¬ß\n‚Ä¶\nOther Novel uses ¬ß\n‚Ä¶\nBinary Enumeration ¬ß\n‚Ä¶\nBooleans ¬ß\n‚Ä¶\nHexadecimal ¬ß\n‚Ä¶\nOperations in Hex ¬ß\n‚Ä¶\nAddition ¬ß\n‚Ä¶\nSubtraction ¬ß\n‚Ä¶\nMultiplication ¬ß\n‚Ä¶\nDivision ¬ß\n‚Ä¶\nOther Novel uses ¬ß\n‚Ä¶\nAddressing ¬ß\n‚Ä¶"},"programming/Compilers-(TODO)":{"title":"Compilers (TODO)","links":[],"tags":[],"content":"Steps:\n\nLexer/Tokenizer: Break up code into smallest meaningful pieces. For python the code\ndef myfunc(x):\\n\\tprint(x)\nmight be broken up into a list of:\n[def, myfunc, (, x, ), :, \\t, print, (, x, ) ]\nParser: Take the tokens and turn them into something logical. For example with our def myfunc(x):\\n\\tprint(x) we might have a parser that generates a tree that looks like this (JSON format):\n\n{function:\n       {\n           label:myfunc,\n           args:[x],\n           body:[\n               callFunction:{\n                   label:print,\n                   args:[x]\n               }\n          ]\n      }\n}\n\nCode Generator:\n\nIt‚Äôs important to note this approach is common, but not complete. There are many steps other compilers will take in addition to these steps.\nLexer/Tokenizer ¬ß\nWe define our language syntax, we could think of this as a map of some text to a meaningful token. Something like:\n&quot;def&quot; -&gt; Start of Function\n&quot;&quot;\n\nAn approach\nReferences ¬ß\n\nA Compiler From Scratch (destroyallsoftware.com)\n"},"programming/Garbage-Collection-(TODO)":{"title":"Garbage Collection (TODO)","links":[],"tags":[],"content":"Algorithms and Theory ¬ß\n\nMark-and-Sweep: Garbage Collection Algorithm - GeeksforGeeks\nStatic single-assignment form - Wikipedia\n\nModern Day implementations ¬ß\nV8 (Node JS, Chromium browsers) ¬ß\n\nTrash talk: the Orinoco garbage collector ¬∑ V8\nHigh-performance garbage collection for C++ ¬∑ V8\nGarbage collection in V8, an illustrated guide | by Irina Shestak | Medium\nsmol-zines/guides/garbage-collection-in-v8.md at main ¬∑ lrlna/smol-zines (github.com)\nv8-perf/gc.md at master ¬∑ thlorenz/v8-perf (github.com)\nJavaScript garbage collection: Browser vs. server - LogRocket Blog\nJavaScript Internals: Garbage Collection | AppSignal Blog\nMastering Memory Management in Node.js: Tips and Tricks for Better Performance (youtube.com)\nUnderstand JS Garbage Collector in 4 mins (youtube.com)\n\nPython ¬ß\n\nPython Garbage Collection: What It Is and How It Works (stackify.com)\nGarbage Collection in Python - GeeksforGeeks\ngc ‚Äî Garbage Collector interface ‚Äî Python 3.12.0 documentation\n"},"programming/HTML-(TODO)":{"title":"HTML (TODO)","links":[],"tags":[],"content":"\nHTML Standard (whatwg.org)\n\n"},"programming/Hashing":{"title":"Hashing","links":["/"],"tags":[],"content":"Hashing is a process where you take some sort of input data and use a hashing algorithm map it to some sort of output data (called a hash). This output data should be deterministic, meaning for each input there should be 1 output when put through our hashing algorithm. Also it should be 1-way, meaning unlike encryption or compression where we want to be able to get the original value for hashing we only want to create an output from an input, but we do not want to be able to get the input from the output. Ideally in most cases you also want something that returns a fixed-size output, so no matter how big your input is you always get the same length output.\nSo to recap hash functions should:\n\nHave 1 output for each input (deterministic) and ideally unique (see hash collisions)\nAble to get output from input, but not input from output (one-way)\nShould return outputs of the same length (Fixed-size output); Not required but nice to have\n\nSo let‚Äôs say we have a hashing algorithm called hash(). When we call hash() with the text kieran (hash(&quot;kieran)) we get back the hash 3617183895572154872. The important thing is that when we call hash(&quot;kieran&quot;) again we should get 3617183895572154872 again. In other words for the same input, we should always get the same output, and ideally the output for each input should be unique.\nUses ¬ß\nThere are far too many uses for hashes to cover them all here (blockchains, git/vcs, cache invalidation etc.), but I have included a few common ones.\nIntegrity Hashes ¬ß\nWhen you‚Äôre downloading a file from the internet you are fundamentally getting it from a network. How do you know that someone has not replaced the original file in transit to your device? How do you know the image your downloading isn‚Äôt actually some malicious code? One way to check is with integrity hashes.\nIntegrity hashes have been around for a while, on the early days of the internet md5 file hashes were common to see on websites you donwloaded software from. Even though security has gotten better since the 2000‚Äôs it‚Äôs still a concerning prospect that you might be downloading unsafe files. The most concerning of these are files you don‚Äôt even choose to download.\nWhen you run javascript on a webpage you often first have to download the file from somewhere. Typically this is done by including a URL in the src attribute of a script tag. Let‚Äôs say for example our file is hosted on https://schulichignite.com/file.js we could do:\n&lt;script src=&quot;https://schulichignite.com/file.js&quot;&gt;&lt;/script&gt;\nWell, if we put on our hacking black fedora‚Äôs and trench-coats there is a clear way for someone malicious to inject code into this. All they have to do is convince your computer (or any of the computers your computer connects to), that whatever malicious code they want to run is at the URL.\nThere are more involved methods of doing this like stealing peoples passwords and uploading malicious code, or hacking into a server etc. The method isn‚Äôt important, the point is that when we ask https://schulichignite.com/file.js for the file we have no way to make sure we are getting what we want. These attacks are often called CDN-poisioning or cache-poisioning. It feeds off a problem of authority. I can‚Äôt trust schulichignite.com and the only validation I can get that the code is correct is from schulichignite.com. Sort of like asking a theif if they took something, and just hoping they tell the truth. So the question as developers is how do we provide something to authenticate the file that works in HTML?\nWell, with our knowledge of hashes we can use a built-in attribute called subresource integrity to add integrity hashes to our javascript. All we do is include an integrity attribute that tells the browser which hash function to use (in our case SHA-1) and then the hash. For example:\n&lt;script src=&quot;https://schulichignite.com/file.js&quot; integrity=&quot;sha1-865cd55417af5a27ab17ae1fff7510c7acc4f250&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\nNow when the browser downloads the file it will run the contents as a string through the SHA-1 hashing algorithm, then check against 865cd55417af5a27ab17ae1fff7510c7acc4f250, and only run it if it matches.\nPasswords ¬ß\nStoring people‚Äôs passwords in plain text is bad. Imagine someone were to read your database and it had information like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnameemailpasswordKierankieran@canadiancoding.came_name_is_not_kieranJamiejamie@hotmail.co.ukwhiskers_is_life23Paulpaul@zmail.govP455W0RD\nKieran and Jamie both don‚Äôt deserve their password stolen (paul might with a password like that), so how do we make it so even if people get access to your database through a hack, or an annoyed ex-employee that your users are safe? Well a password only matters in order for us to know if someone should be allowed to login. So instead of storing the password we let the user type in their password and we just store the hash, since they can then use the same password to generate the same hash and login! and we have the bonus of storing information that is useless to hackers (assuming they can‚Äôt reverse the hash). So instead with our original database we get:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnameemailpasswordKierankieran@canadiancoding.ca3940687576951907022Jamiejamie@hotmail.co.uk6922927947780301451Paulpaul@zmail.govP455W0RD\n(Paul‚Äôs password doesn‚Äôt get hashed because he should feel bad about how bad his password is)\nSalting &amp; peppering ¬ß\nOne very easy to implement way of breaking up common hash collisions for passwords (and other uses) is to add salting. Salting is just adding characters to the end of an input. So for example if we have the input &quot;mypassword&quot; and the salt &quot;+_()*&amp;^%$#@!&quot; then we would hash using hash(&quot;mypassword+_()*&amp;^%$#@!&quot;). This way if something like &quot;hello123&quot; used to collide with &quot;mypassword&quot; then it does not imply hash(&quot;mypassword+_()*&amp;^%$#@!&quot;) == hash(&quot;hello123+_()*&amp;^%$#@!&quot;) (in most common hash functions).\nPeppering is the same idea except you add the pepper to the front of the text, and apply it before the salting. So if you have the pepper &quot;!@#$%^&amp;*()_+&quot;, then with the salt above and the same password as above you would do hash(&quot;!@#$%^&amp;*()_+mypassword+_()*&amp;^%$#@!&quot;).\nHash Collisions ¬ß\nLet‚Äôs say we have a hash function that takes in some text, converts each letter to an integer using an ASCII table, and then sums them to give you a hash. For this function any set of letters that are the same would give you the same hash. So if we called the function ASCII_Hash() then ASCII_Hash(&#039;xyz&#039;) == ASCII_Hash(&#039;yzx&#039;) == ASCII_Hash(&#039;zyx&#039;). These situations where different results provide the same hash are called hash collisions.\nHash collisions are a big problem especially for hashmaps and integrity hashes. It is quite common to have collisions in hash maps, when this happens it means that items that are collided and end up further down the linked list are slower to access. If we had a hashmap that used ASCII_Hash() if we inserted values with the keys &#039;xyz&#039;,&#039;yzx&#039;,&#039;zyx&#039; in that order, then to access the value of zyx we would first have to hash zyx, and then check xyz, then yzx, then finally find it at zyx. These performance hits can cause real problems. In algorithmic complexity notation we go from a constant time (O(1), which is a fancy way to say it takes as long as the hash function takes), to a linear time (O(n), where n is the number of elements that collide, meaning for every colliding element we go up by n * time taken to run). This difference means our hash tables scale horribly over time:\n\n(time to run is measured in how long it takes to access each element in the linked list)\nThis opens up tons of problems like general slowdowns and even denial of service (DOS) attacks, where if you know enough collisions you can keep creating more and more collisions to crash a python server.\nIntegrity hashes are even worse. Hash collisions in integrity hashes are very dangerous. What they imply is that your method of validating something is what it says it is can work for something that isn‚Äôt what you were looking for. Similar to having a security guard that lets in every person named dave because you forgot to specify which dave you wanted to let in. There are tools designed to help generate these collisions, and if someone manages to find a collision and inject malicious code into a file, while you confirm it as ‚Äúsafe‚Äù it can cause big issues.\nPasswords can also have huge issues with hash collisions. Remember what I said about someone being able to hack into a database and just see the hashes. Well if they can create hash collisions then they can access someones account without needing their password. They just need to guess the hash algorithm you‚Äôre using, know the hash they‚Äôre targetting, and if they can create a password that matches the hash then they can get into the account!\nHash-based Data structures ¬ß\nHashmaps/dictionaries/hashtables are a common datastructure that allow you to create key-value pairs. This is what runs behind the scenes for many JSON implementations. So with a JSON file like:\n{\n    &quot;name&quot;:&quot;kieran&quot;,\n}\nIn this case name is our key, and kieran is our value. From here there are 2 classes/structs we will need a Node and a HashTable. In pseudocode they would look like this:\nclass Node:\n    key: str\n    value: any\n\nclass HashTable:\n    buckets: List[List[Node]]\n\nA node will be where we store the key-value pair, which will then be placed into our buckets list/Array. We also need to decide how many buckets we want, for now we will arbitrarily pick 6 (because it makes the drawings easier üòâ) but we will discuss what more or less buckets does shortly. The basic idea is that we will use a hashing function to generate an index location in the buckets list, we will then insert the node at that index in the buckets list. This means that for searching later we can skip searching all values in any of the other buckets!\nSo the insertion would take the steps:\n\nCreate HashTable with 6 empty buckets\nTake the key you want to insert and hash it with some algorithm (make sure resulting hash is just numbers)\nTake that hash and modulo (divide by and take the remainder) it by the number of buckets (in our case 6)\nCreate a node which contains the value and the key\nInsert the node into the index you calculated from the key\n\nSteps 1-4:\n\nStep 5:\n\nHere is what inserting would look like in pseudocode:\nht = HashTable([[],[],[],[],[],[]]) # 1. Create HashTable with 6 empty buckets\n\nfunction insert_into_hash_table(ht:HashTable, key:str, value: Any):\n    # 2. Take the key you want to insert and hash it with some algorithm (make sure resulting hash is just numbers)\n    hashed_key = hash(key)\n    # 3. Take that hash and modulo (divide by and take the remainder) it by the number of buckets (in our case 6)\n    index = int(hashed_key % 6)\n    # 4. Create a node which contains the value and the key\n    new_node = Node(key, value)\n    # 5. Insert the node into the index you calculated from the key\n    ht.buckets[index].insert(new_node)\n\nThe reason why this is handy is because compared to a normal list of every value we do the hash function first (which is fast), then we only have to search the bucket from the index we generated! So the basic algorithm for searching would be:\n\nTake the key you want to find and hash it with some algorithm (make sure resulting hash is just numbers)\nTake that hash and modulo (divide by and take the remainder) it by the number of buckets (in our case 6)\nLook into the HashTable at the given index, if list at index is empty throw an error, if not then go through the list at that index and check each node in the list until you find one with the same key, if you hit the end of the list then throw an error\n\nThe pseudocode would look like:\nfunction search_hash_table(ht:HashTable, key:str):\n    # 1. Take the key you want to insert and hash it with some algorithm (make sure resulting hash is just numbers)\n    hashed_key = hash(key)\n\n    # 2. Take that hash and modulo (divide by and take the remainder) it by the number of buckets (in our case 6)\n    index = int(hashed_key % 6)\n\n    # 3. Look into the `HashTable` at the given index\n\n    ## 3.1 Check if index list is empty\n    if length(ht.buckets[index]) == 0:\n        raise Error(&quot;Key not in HashTable&quot;)\n\n    ## 3.2 go through the list at that index and check each node in the list until you find one with the same key\n    for node in ht.buckets[index]:\n        if node.key == key:\n            return node.value\n\n    ## 3.3 You reached the end of the list without finding the key\n    raise Error(&quot;Key not in HashTable&quot;)\n\nOn the positive side this means if we have a large collection of buckets and our hashes are mostly unique we can skip a ton of values while searching!\nBut on the negative side keep in mind that every bucket that isn‚Äôt being used is wasting memory with an empty list, so be careful what number of buckets you choose. Also keep in mind that collisions will cause the same index to be used, which means every collision makes the efficiency of looking up the node you are adding go down.\nHashability ¬ß\nPython (and lots of languages), will only allow you to hash certain data types. Specifically each data type will have a built in hash function, which defines how that data type should be hashed. In python since all data types are classes, this means that the class must have a __hash__() method. In lots of cases in different languages this ends up being only applicable to immutable data types.\nAn immutable data type is a type of data that cannot be changed. For example tuples have their data set in stone, you cannot append or modify them without reassigning the variable set to a tuple to a new value. For example with tuple‚Äôs to add a value ‚Äúto a tuple‚Äù we would create a new tuple with the same values, and our new value in it. This concept gets complicated in python, but the most important weird situation is that lists are not able to be keys in any dictionaries/hashmaps because the built-in __hash__() function does not work on it. There are several reasons for this, but the main one is that you can mutate the data such as appending and popping items from the list (this article explains in more details why).\nCommon hashing algorithms ¬ß\nGeneral Hashing:\n\nSHA (very common, somewhat secure, very fast)\n\nWikipedia page\nHow SHA-1 Works (Brilliant)\nHow SHA (Secure Hash Algorithm) works? by Marcello Faria\nHow Does SHA-1 Work - Intro to Cryptographic Hash Functions and SHA-1\nSHA 256 | SHA 256 Algorithm Explanation | How SHA 256 Algorithm Works | Cryptography | Simplilearn\nSHA-256 | COMPLETE Step-By-Step Explanation (W/ Example)\nSHA: Secure Hashing Algorithm - Computerphile\n\n\nMD5 (not very secure, but very very fast)\n\nWikipedia page\nMD5 Algorithm | What Is MD5 Algorithm? | MD5 Algorithm Explained | Network Security | Simplilearn\n#34 MD5 Algorithm ( Message Digest 5) Working and Example |CNS|\nWhat is the MD5 Algorithm?\n\n\n\nFor passwords there are more involved hashing algorithms you can look into. These algorithms are designed to take a while to compute, the reason you want this is to avoid brute force attacks (video version here). These are not great for long sets of data because of how slow they are:\nDO RESEARCH YOURSELF AS THIS ARTICLE MAY HAVE AGED BY THE TIME YOU‚ÄôRE READING IT AND THESE MAY NO LONGER BE SECURE!\n\nBcrypt\n\nWikipedia page\nHashing in Action: Understanding bcrypt\nBCRYPT STEP BY STEP\n\n\nPBKDF2\n\nWikipedia page\nPBKDF2 Hashing Algorithm\nPBKDF2 | PRactical Cryptography for Developers\nPBKDF2 | Bill Buchanan OBE\n\n\n\nOther good resources ¬ß\n\nHow to verify quickly | Kieran Wood\nPractical Cryptography for developers | Hash Functions\nTutorialspoint | Cryptography Hash functions\nMIT OpenCourseWare | 21. Cryptography: Hash Functions\nHash Tables &amp; Hash Functions\n"},"programming/Open-Source-&-Free-Software":{"title":"FOSS (Free and Open Source Software)","links":["Programming/Basics","OS-&-Firmware/Unix-&-Linux","OS-&-Firmware/Basics"],"tags":["foss","legal","linux"],"content":"When developing software you have an important choice to make. Should users be able to see the source code to the program you‚Äôre asking them to run? Should you be able to know the internals of what‚Äôs happening in your computer? Much of the software we used today is closed source and proprietary, meaning we don‚Äôt know how it works, since we can‚Äôt view the source code. This is in contrast to many other products like cars for example where we can open it up while it‚Äôs running to determine how it works.\nFree and open source software (FOSS) is a movement that says that users have the right to know what is running, and should be able to understand what‚Äôs happening on their devices.\nOther benefits:\n\nPeople who want a feature can create it and contribute it back to the project for other people to use\nBugs and security flaws can be found and patched\nPeople can learn from existing code\nPrivacy audits can be done on code you are running\nCan take¬†libraries and API‚Äôs¬†and stick them together to build a bigger overall project\n\nOpen source is¬†very¬†popular in software development. Many of the projects that power the internet are open source. Here are a few examples:\n\nlinux kernel; What runs all ‚Äúlinux‚Äù operating systems, which account for over %90 of server market share¬†1\nBootstrap; Popular CSS framework used to build over %20 of sites 2\nPython; Yep the source code for the python programming language is fully open source and you can see exactly how it works\n\nThere are many more examples, but basically most of modern development runs on open source!\nFree software vs Open Source ¬ß\nInside you there are two wolves3‚Ä¶ in all seriousness with open source &amp; free software (abbreviated to FOSS) there are broadly speaking 2 ‚Äúcamps‚Äù or schools of thought, the people interested in it philosophically (free software advocates), and those interested in it ‚Äúpragmatically‚Äù (open source advocates). These schools of thought can overlap, but they are often at odds, namely in their level of commitment.\nPeople like Richard Stallman actually take it further from just open source to free/libre software4. The common phrase used to explain this is ‚Äúfree as in free speech, not as in free beer‚Äù. Free software goes beyond traditional open source and expands to encompass a more stringent philosophy. Free software generally has 4 tenets5, those being:\n\nThe user should have the freedom to run the software as they wish, for whatever purpose\nThe user should have the freedom to change the software and how it runs, therefore free software required open source\nThe user should have the freedom to redistribute their software\nThe user should have the freedom to redistribute their software with their changes\n\nBruce Perens and others on the Debian team have actually expanded these out to the ‚Äúten commandments‚Äù or ‚Äúsocial contract‚Äù :\n\n\nFree Redistribution\nThe license of a Debian component may not restrict any party from selling or giving away the software as a component of an aggregate software distribution containing programs from several different sources. The license may not require a royalty or other fee for such sale.\nSource Code\nThe program must include source code, and must allow distribution in source code as well as compiled form.\nDerived Works\nThe license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.\nIntegrity of The Author‚Äôs Source Code\nThe license may restrict source-code from being distributed in modified form¬†only¬†if the license allows the distribution of¬†patch files¬†with the source code for the purpose of modifying the program at build time. The license must explicitly permit distribution of software built from modified source code. The license may require derived works to carry a different name or version number from the original software. (This is a compromise. The Debian group encourages all authors not to restrict any files, source or binary, from being modified.)\nNo Discrimination Against Persons or Groups\nThe license must not discriminate against any person or group of persons.\nNo Discrimination Against Fields of Endeavor\nThe license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.\nDistribution of License\nThe rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties.\nLicense Must Not Be Specific to Debian\nThe rights attached to the program must not depend on the program‚Äôs being part of a Debian system. If the program is extracted from Debian and used or distributed without Debian but otherwise within the terms of the program‚Äôs license, all parties to whom the program is redistributed should have the same rights as those that are granted in conjunction with the Debian system.\nLicense Must Not Contaminate Other Software\nThe license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that all other programs distributed on the same medium must be free software.\nExample Licenses\nThe¬†GPL,¬†BSD, and¬†Artistic¬†licenses are examples of licenses that we consider¬†free.\n\n\nFrom the Debian Social contract 6\n\n\nWithout these rules being obeyed the argument is that the user is not in control of a program, but rather the program controls the user. These stipulations are what allow the sort of control that free software advocates would call ‚Äúfree or libre‚Äù.\nThe people who are philosophically interested in FOSS care about ‚Äúlibre‚Äù and about the freedom for users. This interest often comes in spite of particular financial incentives.  For example people who are philosophically interested in FOSS would not allow companies to collect data on them, even if it couldn‚Äôt be leaked because the individual should have the freedom to not be known to software developers and companies. This commitment would often also play out in the form of buying components that have open source firmware. running only FOSS operating systems, and generally having products that as much as humanly possible are fully FOSS, even if it means making sacrifices for those commitments7.\nOn the other hand the pragmatist is only interested in FOSS for as far as it serves a practical purpose. Whether its benefits to security, collaboration driving features, or any other benefit, that is what they are committed to. However something not being FOSS only matters in so far as the pros outweigh the cons. Essentially the pragmatic view is only concerned with the consequences of choosing a particular piece of software or hardware, whereas the philosophically interested are more ideological, and even if there are downsides they will still pick a FOSS option because it‚Äôs ‚Äúthe right thing to do‚Äù.\nLicensing ¬ß\n\n\n                  \n                  DISCLAIMER \n                  \n                \nThis is not legal advise, if you‚Äôre going to put this into practice get it looked over by a lawyer first. We‚Äôre not responsible if something goes wrong, I‚Äôm a developer not a lawyer.\n\nOn top of that, a few things to consider while reading:\n\nLaws change over time\nLaws are different in different countries\nLegal systems are often not intuitive. Don‚Äôt just assume it works ‚Äúthe obvious way‚Äù, look it up, or ask a lawyer\n\nA license is basically the thing that tells you what you can do with some software. Sometimes you buy ‚Äúlicense keys‚Äù in order to gain access, other times the licenses are implicit, meaning you agree to them when you use the software. These¬†must¬†be stated either somewhere in the software, and/or¬†must¬†be available in some form to be considered valid. That means if you are just providing a binary/executable, you must have some way for someone to read the license that is available to them.\nGenerally in software development we care about licenses for source code (code used to create the program), but licenses can exist in many forms. For example you might buy a license to use a photo, or to ‚Äúunlock‚Äù a piece of software etc.\nSource code licenses can be used to determine:\n\nIf you can use the code in your project\nIf you can use the project name in your project\nIf you have to send back any changes you make\nIf you are allowed to make any changes to the code\nIf you are allowed to use the code without purchase\nIf the code comes with a warranty\nIf you can change the license to the code &amp; usually which are ‚Äúcompatible‚Äù\netc.\n\nThere are a few common misconceptions about source code licenses:\n\nProjects don‚Äôt have to have¬†just 1¬†license, portions of the code can be licensed differently (this gets messy though)\nLicenses do not imply¬†copyright, or trademarks, just because Facebook has open source libraries you can use code doesn‚Äôt mean you can use their brand name\n\nOpen Source Licenses ¬ß\nOpen source licenses are a particular type of license that is intended to license code according to terms that are in line with open source principles. These come in various flavors, some of which obey the full ‚Äúfree software‚Äù principles, and others which just obey ‚Äúopen source‚Äù principles.\nCopyleft ¬ß\nCopyleft is the opposite of copyright. Instead of being closed by default any copyleft licenses will require derivative products (products made with code that is copyleft) to also be open source. For example¬†GNU GPLv3¬†requires you to disclose the source code:\n\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\n\nAs well as other things like disclose any changes, and you also must maintain the license in any derivatives. This means if you create a new project based off a GPLv3 codebase, your code has to adhere to the same rules!\nCommon open source licenses ¬ß\nIn the open source community there are lots of licenses, and families of licenses that come up a lot\n\nMIT¬†is an incredibly popular license that is incredibly permissible. It lets people do (mostly) whatever they want with the code, while still refusing to supply a warranty. When in doubt, I highly recommend it.\nGPL is a family of licenses. The two most popular are (there‚Äôs also¬†AGPL¬†and others)\n\nGPLV3; Highly popular option that requires people to make any derivatives based off the software also open source.\nLGPLv3; Has similar terms to GLPv3 except if the project only includes the code to be used as a¬†library¬†then the remainder of the program doesn‚Äôt have to be under the same terms\n\n\nCreative commons¬†is a family of licenses that are generally permissive, but each ‚Äúcode‚Äù has different requirements to satisfy. One thing to keep in mind is that the license is¬†non-revokable, meaning even if you want to stop sharing later anyone who has copies can do what they want so long as they‚Äôre within the original terms. You can see the full list¬†here, but some common ones include:\n\nCC-BY: You can do what you want, but the original creator must be credited somehow\nCC-BY-SA: You can do what you want, but the original creator must be credited somehow and all adaptations must have the same terms\nCC-0: The work is fully public domain and you give up all rights (including copyright) to the content\n\n\nApache 2¬†is a common license for big company projects because it allows a project to be open source, while keeping people from being able to use your trademarks\n\nContent Licensing ¬ß\nThe idea of FOSS has also inspired many movements to ‚Äúdemocratize information‚Äù. This means instead of having the traditional proprietary approaches to content being produced, just like source code the information for content is open for people to use.\nPublic Domain &amp; Creative commons ¬ß\nThe public domain is the name for any content that doesn‚Äôt fall under any intellectual property claims8. This can be people volunteering their content, or if licensing expires in a country (such as Winnie the pooh9 10).\nThe creative commons is a non-profit group that is devoted to help bring works into the public domain, and/or make it easy to license content in a way that makes it accessible to everyone. Creative commons licenses will typically have at least 1 stipulation. One thing to keep in mind is you often can‚Äôt remove the license you pick. There are a ton of different possible licenses available for people to choose from that have various different stipulations, some popular ones are:\n\nCC By 4.0 (Attribution 4.0 International)\n\nPeople must include attribution11\n\n\nCC By-SA 4.0 (Attribution-ShareAlike 4.0 International)\n\nPeople must include attribution\nCannot change the license\n\n\nCC BY-NC-SA 4.0 (Attribution-NonCommercial-ShareAlike 4.0 International)\n\nMust include attribution\nCannot use it in commercial projects\nCannot change the license of the text\n\n\nCC BY-ND 4.0 (Attribution-NoDerivs 4.0 International)\n\nMust include attribution\nCannot modify or adapt content\n\n\n\nIf you are planning to use these licenses they have a tool to help choose, and I would recommend using it.\nMIT Open Courseware ¬ß\nIn 2001 MIT launched the OpenCourseWare project12. This project was trying to help democratize the access to university level course content. They distribute the content on multiple platforms, details for which can be found here.\nCritiques of open source ¬ß\nWhile the idea of open source sounds great there are many critiques in practice. While these shouldn‚Äôt necessarily dissuade you from developing open source they are things to keep in mind:\n\nLittle to no accountability\n\nThe Dark Side of Open Source // What really happened to Faker.js? (youtube.com)\nThe Dark Side of Open Source (youtube.com)\nDavid Tolney\n\nrustconf.md (github.com)\nDavid Tolnay on the ‚ÄúRustConf Keynote Fiasco‚Äù | Hacker News (ycombinator.com)\nThe LAST Rust Drama (youtube.com)\n\n\n\n\nWeak Supply chain\n\nLeftpad\n\nNPM &amp; left-pad: Have We Forgotten How To Program? - (davidhaney.io)\nRage-quit: Coder unpublished 17 lines of JavaScript and ‚Äúbroke the Internet‚Äù | Ars Technica\nHow one developer just broke Node, Babel and thousands of projects in 11 lines of JavaScript ‚Ä¢ The Register\n\n\nEverything\n\nHow One Command Broke NPM (youtube.com)\n‚Äòeverything‚Äô blocks devs from removing their own npm packages (bleepingcomputer.com)\nEverything Breaks NPM (youtube.com)\nWhen ‚ÄúEverything‚Äù Becomes Too Much: The npm Package Chaos of 2024 - Socket\n\n\nOpenSSL\n\nTech giants, chastened by Heartbleed, finally agree to fund OpenSSL | Ars Technica\nOpenSSL Gets Funding After Heartbleed - BankInfoSecurity\nOpenSSL needs corporate funding to avoid Heartbleed repeat | ZDNET\n\n\nNPM security: preventing supply chain attacks | Snyk\nNPM supply-chain attack impacts hundreds of websites and apps (bleepingcomputer.com)\nActix\n\n‚ÄôI am done with open source‚Äô: Developer of Rust Actix web framework quits, appoints new maintainer ‚Ä¢ The Register\nActix project postmortem | Hacker News (ycombinator.com)\nA sad day for Rust (steveklabnik.com)\nThe Downfall of Actix Web (youtube.com)\n\n\n\n\n\nAdditional Resources ¬ß\n\nArticles &amp; Blog posts on the topic\n\nStealing Like a Developer | Schulich Ignite\nThe Open-Source Philosophy / Blogs / Perficient\nLateNite Legacy Blog (latenitefilms.com)\n\n\nAaron Swartz\n\nAaron Swartz‚Äô Death Fuels MIT Probe, White House Petition to Oust Prosecutor - ABC News (go.com)\nAaron Swartz‚Äôs Brilliant Life and Tragic Death (rollingstone.com)\nThe Darker Side of Aaron Swartz | The New Yorker\nAaron Swartz\n\n\nHistory of Gnu, Linux, Free and Open Source Software (Revolution OS) (youtube.com)\nReclaim your freedom with free libre software now - Richard Stallman of Free Software Movement (youtube.com)\nFor A Free Digital Society - Richard M. Stallman (youtube.com)\nThe Code: Story of Linux documentary (Multilingual) (youtube.com)\nFree software, free society: Richard Stallman at TEDxGeneva 2014 (youtube.com)\n\nFootnotes ¬ß\n\n\n‚ÄúLinux is used to power 96.3% of the world‚Äôs top web servers‚Äù ‚Ü©\n\n\n‚ÄúBootstrap is used by %25.8 of all the websites whose Javascript library we know. This is 21.3% of all websites‚Äù ‚Ü©\n\n\nInside You There Are Two Wolves | Know Your Meme ‚Ü©\n\n\nWhy Open Source Misses the Point of Free Software - GNU Project - Free Software Foundation ‚Ü©\n\n\nFree software, free society: Richard Stallman at TEDxGeneva 2014 (youtube.com) ‚Ü©\n\n\nDebian Social Contract ‚Ü©\n\n\nhttps://youtu.be/Ag1AKIl_2GM?si=zN_U9fdbwRTZBFKv&amp;t=433 ‚Ü©\n\n\nWelcome to the Public Domain - Copyright Overview by Rich Stim - Stanford Copyright and Fair Use Center ‚Ü©\n\n\nWinnie-the-Pooh and hundreds of other works are now in the public domain | Temple Now ‚Ü©\n\n\nHow Winnie-the-Pooh highlights flaws in U.S. copyright law ‚Äî and what that could mean for Canada | CBC Radio ‚Ü©\n\n\nhttps://creativecommons.org/licenses/by/4.0/legalcode.en#:~:text=Attribution%20.,form)%2C%20You%20must%3A ‚Ü©\n\n\nAuditing Classes at M.I.T., on the Web and Free - The New York Times (nytimes.com) ‚Ü©\n\n\n"},"programming/Parallelism-&-Asynchronus-code-(TODO)":{"title":"Parallelism & Asynchronus code (TODO)","links":[],"tags":[],"content":"Most code is serial. This means it runs from top to bottom, and it runs one line at a time. There are various different ways that we can break this paradigm and run our code multiple lines at a time.\nAsync/Await (TODO) ¬ß\n‚Ä¶\nThreading (TODO) ¬ß\n‚Ä¶\nMultiprocessing (TODO) ¬ß\n‚Ä¶\n\nAmdahl‚Äôs law - Wikipedia\n"},"programming/Programming-Paradigms-(TODO)":{"title":"Programming Paradigms (TODO)","links":[],"tags":[],"content":"Object oriented ¬ß\n‚Ä¶\nCritiques ¬ß\n\nWhy Objects Suck (codinghorror.com)\n\nProcedural ¬ß\n‚Ä¶\nFunctional ¬ß\n‚Ä¶"},"programming/Speculation-&-Branch-Prediction-(TODO)":{"title":"Speculation & Branch Prediction (TODO)","links":[],"tags":[],"content":"\nBranch predictor - Wikipedia\nSpeculation in JavaScriptCore | WebKit\n\nSecurity Concerns (TODO) ¬ß\n\nMeltdown and Spectre (meltdownattack.com)\nMeltdown and Spectre (spectreattack.com)\nSpectre and Meltdown explained: A comprehensive guide for professionals | TechRepublic\nSpectre (security vulnerability) - Wikipedia\nMeltdown (security vulnerability) - Wikipedia\n4 years since Sperctre vulnerability discovery | Kaspersky official blog\nIntel‚Äôs AMD bug find proves that Spectre is still looming over us - The Verge\nComputer scientists discover new vulnerability affecting computers globally | ScienceDaily\nAffected Processors: Transient Execution Attacks &amp; Related Security‚Ä¶ (intel.com)\n"},"programming/python":{"title":"python","links":["/"],"tags":[],"content":"Python is a versatile and widely-used programming language that is used by developers, data scientists, and educators alike. Created by Guido van Rossum and first released in 1991, Python has steadily grown in popularity due to its simplicity and readability. Its design philosophy emphasizes code readability, making it an ideal choice for both beginners and experienced programmers. Python‚Äôs ease of use, combined with its robust libraries and frameworks, has made it a top choice for a wide range of applications, from web development and data analysis to artificial intelligence and scientific computing.\nOne of Python‚Äôs key strengths is its extensive standard library (largely housed on¬†PyPi), which provides a wide array of modules and packages that simplify tasks such as file handling, machine learning, networking, web development and even graphical user interface (GUI) development. Python‚Äôs versatility extends to its cross-platform compatibility, as it can be run on various operating systems, including Windows, macOS, and Linux. Furthermore, its open-source nature fosters a vibrant community of developers who continuously contribute to its growth, ensuring that Python remains at the forefront of programming languages.\nPython‚Äôs reputation as a go-to language for data science and machine learning has skyrocketed in recent years. Libraries like¬†NumPy,¬†pandas, and¬†scikit-learn¬†empower data scientists to efficiently manipulate and analyze data, while frameworks like¬†TensorFlow¬†and¬†PyTorch¬†provide powerful tools for building and training machine learning models. Likewise¬†Flask,¬†FastAPI, and¬†Django¬†are web development frameworks that have become staples of modern web development. Python‚Äôs simplicity, combined with these libraries and frameworks, has made it a driving force in the rapidly evolving fields of artificial intelligence and data-driven decision-making. In summary, Python‚Äôs blend of simplicity, versatility, and a thriving ecosystem make it a language of choice for developers across a wide spectrum of disciplines, making it a timeless and invaluable tool in the world of programming.\nCREATING AND USING FILES ¬ß\nCreating and using Python files, also known as Python scripts, is the foundation of writing and running Python programs. Here‚Äôs a beginner-friendly explanation of how to get started:\nINSTALLING PYTHON ¬ß\n\nBefore you start creating Python files, you need to have Python installed on your computer. You can download it from the official Python website (https://www.python.org/downloads/).\nFollow the installation instructions for your operating system.\n\nEDITING PYTHON CODE ¬ß\n\nYou can write Python code using a simple text editor (like Notepad on Windows or TextEdit on macOS) or use specialized Python IDEs (Integrated Development Environments) like Visual Studio Code, PyCharm, or IDLE.\nChoose the option that suits you best. IDEs provide additional features to make coding easier.\n\nCREATING A PYTHON FILE ¬ß\n\nIn your chosen text editor or IDE, create a new file. To do this, go to ‚ÄúFile‚Äù &gt; ‚ÄúNew‚Äù or press¬†Ctrl+N¬†(Windows) or¬†Cmd+N¬†(macOS).\nSave the file with a¬†.py¬†extension, which indicates it‚Äôs a Python script. For example, you can save it as¬†my_script.py.\n\nWRITING YOUR FIRST PYTHON CODE ¬ß\n\nIn your newly created Python file, you can start writing Python code. Here‚Äôs a simple ‚ÄúHello, World!‚Äù example:\n\nprint(&quot;Hello, World!&quot;)\n\nThis code uses the¬†print()¬†function to display ‚ÄúHello, World!‚Äù on the screen.\n\nRUNNING YOUR PYTHON SCRIPT ¬ß\n\nTo run your Python script, you need to open a terminal or command prompt.\nNavigate to the directory where your Python file is located using the¬†cd¬†command (e.g.,¬†cd Documents¬†if your file is in the ‚ÄúDocuments‚Äù folder).\nThen, type¬†python¬†followed by the name of your Python file and press Enter:\n\npython my_script.py\n\nYour Python script will execute, and you‚Äôll see the output in the terminal.\n\nEDITING AND SAVING CHANGES ¬ß\n\nYou can make changes to your Python file by opening it in your text editor or IDE, editing the code, and saving the file (usually by pressing¬†Ctrl+S¬†or¬†Cmd+S).\nAfter saving, you can rerun the script to see the updated results.\n\nLEARNING AND EXPERIMENTING ¬ß\n\nPython is a versatile language with many features and libraries. You can learn by exploring Python tutorials, books, or online courses.\nAs you learn, you can create more complex Python scripts to perform various tasks, from simple calculations to building web applications or analyzing data.\n\nThat‚Äôs the basic process of creating and using Python files. Start with simple scripts like ‚ÄúHello, World!‚Äù and gradually build your skills by tackling more advanced projects. Python is known for its readability and simplicity, making it an excellent choice for beginners to start their coding journey.\nVARIABLES &amp; TYPES ¬ß\nPython is a versatile programming language that can work with various types of data. Here‚Äôs a basic overview of three fundamental data types:¬†int,¬†float, and¬†str. These 3 data types help to make up most of the basic operations you will do.\nINTEGERS (INT) ¬ß\nIntegers are whole numbers, which means they don‚Äôt have any decimal points.\n\nYou can use integers for counting, indexing, and performing arithmetic operations like addition and subtraction.\nFor Example:¬†5,¬†-10,¬†1000\n\nmy_integer = 42\nprint(my_integer)  # Output: 42\nFLOATING-POINT NUMBERS (FLOAT) ¬ß\n\nFloating-point numbers, or floats, are numbers that can have decimal points.\nYou use floats when you need to represent values with precision, such as measurements or calculations involving fractions.\nExample:¬†3.14,¬†-0.5,¬†2.0\n\nmy_float = 3.14159\nprint(my_float)  # Output: 3.14159\nSTRINGS (STR) ¬ß\n\nStrings are sequences of characters, like text or words, enclosed in single (‚Äô ‚Äò), double (‚Äù ‚Äú), or triple (‚Äô‚Äô‚Äô ‚Äô‚Äô‚Äô or ‚Äù‚Äù‚Äù ‚Äú‚Äù‚Äù) quotes.\nYou can manipulate strings, concatenate them (combine them), and perform various operations like searching for specific characters.\nExample:¬†&#039;Hello, World!&#039;,¬†&quot;Python is fun&quot;,¬†&#039;&#039;&#039;Triple-quoted strings&#039;&#039;&#039;\n\nmy_string = &quot;Hello, World!&quot;\nprint(my_string)  # Output: Hello, World!\nThese three basic data types are the building blocks for most Python programs. You can perform operations on them, combine them, and use them to represent different kinds of data in your code. As you continue to learn Python, you‚Äôll discover more data types and ways to work with them, but these are the essential ones to get started.\nCOLLECTIONS ¬ß\nIf you are not familiar you can find details about what collections are¬†here.\nPython provides two common collection types, lists, and tuples. These collection types allow you to store multiple values in a single variable.\nLists ¬ß\n\nA list is an ordered collection of items.\nYou can store various types of data in a list, such as numbers, strings, or even other lists.\nLists are mutable, which means you can change their contents (add, remove, or modify elements).\n\nCreating a List:¬†To create a list, use square brackets¬†[]¬†and separate the items with commas.\nmy_list = [1, 2, 3, &quot;apple&quot;, &quot;banana&quot;]\nAccessing Elements:¬†You can access individual elements in a list by their position, called an index. Python uses zero-based indexing, so the first element is at index 0.\nfirst_item = my_list[0]  # Gets the first item (1)second_item = my_list[1]  # Gets the second item (2)\nModifying a List:¬†You can change, add, or remove items from a list.\nmy_list[3] = &quot;cherry&quot;  # Modifies an item (changes &quot;apple&quot; to &quot;cherry&quot;)my_list.append(4)  # Adds an item to the end (appends 4)my_list.remove(&quot;banana&quot;)  # Removes an item (removes &quot;banana&quot;)\nTuples ¬ß\n\nA tuple is similar to a list, but it is immutable, meaning you cannot change its elements once it‚Äôs created.\nTuples are typically used when you want to create a collection of items that should not be modified.\n\nCreating a Tuple:¬†To create a tuple, use parentheses¬†()¬†and separate the items with commas.\nmy_tuple = (1, 2, 3, &quot;apple&quot;, &quot;banana&quot;)\nAccessing Elements:¬†You access tuple elements in the same way as with lists, using zero-based indexing.\nfirst_item = my_tuple[0]  # Gets the first item (1)second_item = my_tuple[1]  # Gets the second item (2)\nImmutable Nature:¬†You cannot change the elements of a tuple after creation. Attempting to do so will result in an error.\nmy_tuple[3] = &quot;cherry&quot;  # This will raise an error (Tuples are immutable)\nWhen to Use Lists vs. Tuples:\n\nUse lists when you need a collection of items that can change over time.\nUse tuples when you want to create a collection of items that should remain constant.\n\nHere‚Äôs a simple summary: Lists are like dynamic containers where you can put different things and change them, while tuples are like sealed containers where you put things that won‚Äôt change. Both are valuable tools in Python, and your choice depends on your specific needs in a program.\nFUNCTIONS ¬ß\nIf you are not familiar you can find details about what functions are¬†here.\nPython functions are like mini-programs or reusable blocks of code that perform specific tasks. Think of them as functions in math, where you input something, and it gives you a result. In Python, you can create your own functions to perform tasks you need. Here‚Äôs a beginner-friendly explanation:\nDEFINING A FUNCTION ¬ß\n\nTo create a function, you use the¬†def¬†keyword, followed by the function name and parentheses¬†(). You can also include parameters (input values) inside the parentheses.\n\ndef greet(name):    \n    print(&quot;Hello, &quot; + name + &quot;!&quot;)\n\nIn this example, we defined a function called¬†greet¬†that takes one parameter,¬†name.\n\nCALLING A FUNCTION ¬ß\n\nOnce you‚Äôve defined a function, you can use it by calling it. To call a function, you simply write its name followed by parentheses and any necessary arguments (values for the parameters).\n\ngreet(&quot;Alice&quot;)\n\nThis line of code calls the¬†greet¬†function and passes¬†&quot;Alice&quot;¬†as the¬†name¬†parameter.\n\nRETURN VALUES ¬ß\n\nFunctions can also return a result using the¬†return¬†keyword. This is like the answer you get from a math function.\n\ndef add(a, b):    \n    result = a + b    \n    return result\n\nIn this example, the¬†add¬†function takes two parameters,¬†a¬†and¬†b, adds them together, and returns the result.\n\nsum_result = add(5, 3)\nprint(sum_result)  # Output: 8\n\nHere, we call the¬†add¬†function with¬†5¬†and¬†3¬†as arguments and store the result in the¬†sum_result¬†variable.\n\nREUSABILITY ¬ß\n\nFunctions make your code more organized and reusable. You can use the same function multiple times throughout your program.\n\nSCOPE ¬ß\n\nVariables defined inside a function have local scope, meaning they can only be accessed within that function. Variables outside the function have global scope, which means they can be used throughout your code.\n\nBUILT-IN FUNCTIONS ¬ß\n\nPython also comes with many built-in functions, like¬†print(),¬†len(), and¬†input(), which you can use without having to define them yourself.\n\nHere‚Äôs a simple summary: Functions in Python allow you to define a set of instructions that can be used over and over again. They take input, perform actions, and can return results. Functions are like handy tools you create to make your coding tasks easier and more organized.\nCONTROL FLOWS ¬ß\nPython control flows, especially the¬†if¬†statement, help you make decisions in your code. Think of them as instructions to your program to perform certain actions based on conditions. Let‚Äôs break it down in a beginner-friendly way:\nTHE¬†IF¬†STATEMENT ¬ß\n\nThe¬†if¬†statement is used to make decisions in Python.\nIt allows your program to execute different code blocks depending on whether a condition is true or false.\n\nBASIC¬†IF¬†SYNTAX ¬ß\n\nThe basic structure of an¬†if¬†statement looks like this:\n\nif condition:    \n    # Code to execute if the condition is True\n\nThe¬†condition¬†is an expression that evaluates to either¬†True¬†or¬†False.\n\nTRUTHINESS ¬ß\n\nIn Python, many things can be considered either ‚Äútruthy‚Äù or ‚Äúfalsy.‚Äù This means that they can be evaluated as equivalent to¬†True¬†or¬†False¬†in a boolean context.\nCommon truthy values include non-zero numbers, non-empty strings, and non-empty containers (like lists or dictionaries).\nCommon falsy values include¬†0, an empty string¬†&quot;&quot;, and empty containers.\n\nBOOLEAN LOGICAL COMPARISONS ¬ß\n\n\nYou can compare values using boolean logical operators to create conditions in your¬†if¬†statements.\n\n\nCommon boolean operators are:\n\n==¬†(equal): Checks if two values are equal.\n!=¬†(not equal): Checks if two values are not equal.\n&lt;¬†(less than): Checks if one value is less than another.\n&gt;¬†(greater than): Checks if one value is greater than another.\n&lt;=¬†(less than or equal to): Checks if one value is less than or equal to another.\n&gt;=¬†(greater than or equal to): Checks if one value is greater than or equal to another.\n\n\n\nExample:\nx = 5\ny = 10 \nif x &lt; y:    \n    print(&quot;x is less than y&quot;)\n\nIn this example, the¬†if¬†statement checks if¬†x¬†is less than¬†y. If it‚Äôs true, it prints ‚Äúx is less than y.‚Äù\n\nELSE¬†AND¬†ELIF¬†(ELSE-IF) STATEMENTS ¬ß\n\nYou can extend¬†if¬†statements with¬†else¬†and¬†elif¬†(else-if) statements to handle multiple conditions.\n\nExample:\nage = 20 \nif age &lt; 18:    \n    print(&quot;You are underage.&quot;)\nelif age &gt;= 18 and age &lt; 65:\n    print(&quot;You are an adult.&quot;)\nelse:    \n    print(&quot;You are a senior citizen.&quot;)\n\nIn this example, the code checks different conditions based on the age variable and prints an appropriate message.\n\nNESTED¬†IF¬†STATEMENTS ¬ß\n\nYou can also nest¬†if¬†statements inside other¬†if¬†statements to handle more complex conditions.\n\nExample:\nx = 5 \nif x &gt; 0:\n\tif x % 2 == 0:\n\t    print(&quot;x is a positive even number.&quot;)\n\telse:        print(&quot;x is a positive odd number.&quot;)\nelse:    \n    print(&quot;x is not a positive number.&quot;)\n\nIn this example, we have nested¬†if¬†statements to determine whether¬†x¬†is positive and even or positive and odd.\n\nIn summary,¬†if¬†statements allow your Python program to make decisions based on conditions. You can use boolean operators to create conditions, and you can include¬†else¬†and¬†elif¬†statements for more complex decision-making. This is a fundamental building block for creating dynamic and responsive code in Python.\nLOOPS ¬ß\nPython loops are used to repeatedly execute a block of code. They allow you to automate repetitive tasks by running the same code multiple times. Let‚Äôs explore Python loops in a beginner-friendly way:\nThe¬†for¬†Loop ¬ß\n\nA¬†for¬†loop is used when you know how many times you want to repeat a certain action. It‚Äôs often used to iterate over a sequence, such as a list or a range of numbers.\n\nBasic¬†for¬†Loop Syntax:\nfor variable in sequence:    \n    # Code to execute in each iteration\n\nvariable¬†represents an item from the sequence in each iteration, and¬†sequence¬†is the collection of items to loop through.\n\nExample:\nfruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] \nfor fruit in fruits:\n    print(fruit)\n\nIn this example, the¬†for¬†loop iterates through the¬†fruits¬†list and prints each fruit one by one.\n\nThe¬†while¬†Loop ¬ß\n\nA¬†while¬†loop is used when you want to repeat a block of code as long as a certain condition is true. It‚Äôs often used when you don‚Äôt know in advance how many times the loop will run.\n\nBasic¬†while¬†Loop Syntax:\nwhile condition:    \n    # Code to execute as long as the condition is True\n\nThe loop will continue running as long as¬†condition¬†remains¬†True.\n\nExample:\ncount = 0 \nwhile count &lt; 5:    \n    print(&quot;Count: &quot;, count)    \n    count += 1\n\nIn this example, the¬†while¬†loop prints the value of¬†count¬†as long as it‚Äôs less than¬†5, incrementing¬†count¬†in each iteration.\n\nLoop Control Statements ¬ß\n\nYou can control the flow of loops using special statements:\n\nbreak: Terminates the loop prematurely.\ncontinue: Skips the current iteration and moves to the next.\n\n\n\nExample (using¬†break):\nnumbers = [1, 2, 3, 4, 5, 6] \nfor num in numbers:    \n    if num == 4:        \n    break  # Exit the loop when num is 4    \nprint(num)\n\nIn this example, the loop stops when¬†num¬†becomes¬†4, and the code after the loop continues executing.\n\nExample (using¬†continue):\nnumbers = [1, 2, 3, 4, 5, 6] \nfor num in numbers:    \n    if num % 2 == 0:        \n        continue  # Skip even numbers    \n\tprint(num)\n\nIn this example, the loop skips even numbers and continues to the next iteration.\n\nPython loops are powerful tools for automating repetitive tasks and processing data. By understanding¬†for¬†and¬†while¬†loops and how to control their flow, you can make your programs more dynamic and efficient.\nDEFINING YOUR OWN TYPES ¬ß\nIn Python, classes are like blueprints for creating objects. Think of a class as a template that defines the properties (attributes) and behaviors (methods) that objects of that class will have. Let‚Äôs break down Python classes in a beginner-friendly way:\nCLASS DEFINITION ¬ß\n\nTo create a class, you use the¬†class¬†keyword, followed by the name of the class (usually starting with a capital letter).\n\nclass Dog:    \n    # Class definition goes here\n\nIn this example, we‚Äôve defined a class called¬†Dog.\n\nATTRIBUTES ¬ß\n\nAttributes are variables that store data within a class. They represent the characteristics or properties of objects created from the class.\n\nclass Dog:    \n    breed = &quot;Unknown&quot;  # Attribute to store the dog&#039;s breed    \n    age = 0            # Attribute to store the dog&#039;s age\n\nIn this class,¬†breed¬†and¬†age¬†are attributes that every dog object will have.\n\nMETHODS ¬ß\n\nMethods are functions defined within a class. They represent the actions or behaviors that objects of the class can perform.\n\nclass Dog:    \n    breed = &quot;Unknown&quot;    \n    age = 0     \n \n    def bark(self):        \n        print(&quot;Woof! Woof!&quot;)    \n \n    def fetch(self):       \n        print(&quot;Fetching the ball...&quot;)\n\nIn this class,¬†bark()¬†and¬†fetch()¬†are methods that represent the actions a dog can do.\n\nCREATING OBJECTS (INSTANCES) ¬ß\n\nTo use a class, you create objects (instances) from it. An object is a specific instance of a class.\n\nmy_dog = Dog()  # Creating an instance of the Dog class\n\nmy_dog¬†is now an object of the¬†Dog¬†class.\n\nACCESSING ATTRIBUTES AND METHODS ¬ß\n\nYou can access attributes and methods of an object using dot notation (object_name.attribute¬†or¬†object_name.method()).\n\nmy_dog.breed = &quot;Golden Retriever&quot;   # Setting the breed attribute\nmy_dog.age = 3                      # Setting the age attribute \nprint(&quot;My dog is a&quot;, my_dog.breed)  # Accessing the breed attribute\nmy_dog.bark()                       # Calling the bark method\n\nHere, we‚Äôve set the¬†breed¬†and¬†age¬†attributes and called the¬†bark()¬†method on¬†my_dog.\n\nCONSTRUCTOR METHOD (__INIT__) ¬ß\n\nThe¬†__init__¬†method is a special method in Python classes. It‚Äôs called when you create an object from the class and is used to initialize attributes.\n\nclass Dog:    \n    def __init__(self, breed, age):        \n        self.breed = breed        \n        self.age = age     \n \n    def bark(self):        \n        print(&quot;Woof! Woof!&quot;)\n\nWhen you create a¬†Dog¬†object, you need to provide values for¬†breed¬†and¬†age.\n\nmy_dog = Dog(&quot;Golden Retriever&quot;, 3)\n\nThis way, you can create a dog object with specific attributes during its creation.\n\nThat‚Äôs the basic idea of Python classes! Classes allow you to define a blueprint for creating objects with specific attributes and behaviors. They help you organize your code in a structured and reusable way, which is especially useful for building complex applications.\nType hints ¬ß\nType hints are a way in python to specify the intended type of a variable (not enforced just highly suggested). This works by having a colon, then the type declaration for each varaible/parameter/attribute. You can even include details about return types in functions with def function_name(parameter) -&gt; return_type For example:\nage = 21\n \ndef greet(name):\n¬† ¬†return f&quot;Hello {name}&quot;\n \n  \n \nclass Animal:\n¬† ¬†def __init__(self, name):\n¬† ¬† ¬† self.name = name\n \nCan be converted to:\nage:int = 21\n \ndef greet(name:str) -&gt; str:\n¬† ¬†return f&quot;Hello {name}&quot;\n \nclass Animal:\n¬† ¬†def __init__(self, name:str):\n¬† ¬† ¬† self.name:str = name\n \nThis gives an indication to people running your code which data types they should use. Along with this there are a few special types to keep in mind (most need to be imported from the typing module):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTypeUsageExampleUnionTo indicate one type OR anotherA variable called age which can be a string or int could be given as age:Union[str,int] = &quot;Twenty Three&quot;LiteralThe avlue for the variable is literally one of the subscripted valuesx is 2, 4 or 6 only x:Literal[2,4,6]TupleA tuple is an imutable data type similar to a list, this can mean a tuple, or is used to indicate multiple return valuesThe function func() returns an int and a bool in that order def func() -&gt; Tuple[int, boolListA list is a collection. Collections can be subscripted to tell you what‚Äôs insideusers is a list of list of strings users:List[List[str]] = [[&quot;kieran&quot;],[&quot;James&quot;]]CallableThis means any object that has a __call__() method including functions (yes they are objects)Passing the function do_stuff() to time(func:Callable) so it can run it and time it time(do_stuff)\nEnforcing types ¬ß\nPython does not enforce types on function parameters. But you can make your own type enforcement by doing type comparisons. There are two ways to do this. The first is to use type() and compare to the class, for example:\n \ndef greet(name:str) -&gt; str:\n \n¬† if not type(name) == str:\n \n¬† ¬† raise ValueError(f&quot;{name} is not a string&quot;)\n \n¬† return f&quot;Hello {name}&quot;\n \n  \n \nclass Animal:\n \n¬† def __init__(self, name:str):\n \n¬† ¬† self.name:str = name\n \n  \n \ndef show_animal(animal:Animal):\n \n¬† if not type(animal) == Animal:\n \n¬† ¬† raise ValueError(f&quot;{animal} is not an Animal&quot;)\n \n¬† return f&quot;This animal is a {animal.name}&quot;\n \nThis method works ok, but it‚Äôs not the best. For example let‚Äôs say you have a class that extends the str class, it would fail that check:\n \nclass MyString(str):\n¬† def __init__(self,value:str):\n¬† ¬† if not type(value) == str:\n¬† ¬† ¬† raise ValueError(f&quot;{value} is not a string&quot;)\n¬† ¬† self.value = value\n \n¬† def __str__(self) -&gt; str:\n¬† ¬† return self.value ¬†\n \ndef greet(name:str) -&gt; str:\n¬† if not type(name) == str:\n¬† ¬† raise ValueError(f&quot;{name} is not a string&quot;)\n¬† return f&quot;Hello {name}&quot;\n \ngreet(MyString(&quot;Kieran&quot;)) # ValueError: Kieran is not a string\nIf we want to include subclasses we should use isinstance():\nclass MyString(str):\n¬† def __init__(self,value:str):\n¬† ¬† if not type(value) == str:\n¬† ¬† ¬† raise ValueError(f&quot;{value} is not a string&quot;)\n¬† ¬† self.value = value\n \n¬† def __str__(self) -&gt; str:\n¬† ¬† return self.value ¬†\n  \ndef greet(name:str) -&gt; str:\n¬† if not isinstance(name, str):\n¬† ¬† raise ValueError(f&quot;{name} is not a string&quot;)\n¬† return f&quot;Hello {name}&quot;\n \ngreet(MyString(&quot;Kieran&quot;)) # Hello Kieran\nHere are some good types you can use with isinstance() that are more general:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTypeUsespackageNumberAll number types (int and float) work with itnumbers.NumberIterableAny type that can be iterated (a for loop works on it)IterableCallableAny type that can be called with parenthesis () (like function objects)Callable\nFor example:\n \nfrom numbers import Number\n \nprint(isinstance(1,Number)) # True\n \nprint(isinstance(1.2,Number)) # True\n \nprint(isinstance(1j,Number)) # True\n \n  \n \nfrom typing import Iterable\n \nprint(isinstance([],Iterable)) # True\n \nprint(isinstance(&quot;&quot;,Iterable)) # True\n \nprint(isinstance({},Iterable)) # True\n \n  \n \nfrom typing import Callable\n \n  \n \ndef greet(name:str) -&gt; str:\n \n¬† if not isinstance(name, str):\n \n¬† ¬† raise ValueError(f&quot;{name} is not a string&quot;)\n \n¬† return f&quot;Hello {name}&quot;\n \n  \n \nis_str = lambda s: isinstance(s, str) # Anonymous function\n \n  \n \nclass SquareNum:\n \n¬† ¬† def __init__(self, num:Number):\n \n¬† ¬† ¬† ¬† if not isinstance(num, Number):\n \n¬† ¬† ¬† ¬† ¬† ¬† raise ValueError(f&quot;{num} is not a Number&quot;)\n \n¬† ¬† ¬† ¬† self.num=num\n \n¬† ¬† def __call__(self) -&gt; Number:\n \n¬† ¬† ¬† ¬† return self.num *self.num\n \n  \n \nprint(isinstance(greet, Callable)) # True\n \nprint(isinstance(is_str, Callable)) # True\n \nprint(isinstance(SquareNum, Callable)) # True\n \n  \n \nWhile this works there are even better solutions. Pydantic is a python package that‚Äôs designed to help make data validation easy. The package helps with a few things, but mostly it helps solve a very annoying situation that happens constantly. When you get data from a server it will often come down as JSON, which will be converted to a python dictionary. These dictionaries can sometimes be very large. Here‚Äôs an example from their website:\n \n  \n \nfrom pydantic import BaseModel, PositiveInt\n \nclass User(BaseModel):\n \n¬† ¬† id: int ¬†\n \n¬† ¬† name: str = &#039;John Doe&#039; ¬†\n \n¬† ¬† signup_ts: datetime | None ¬†\n \n¬† ¬† tastes: dict[str, PositiveInt] ¬†\n \n  \n  \n \nexternal_data = {\n \n¬† ¬† &#039;id&#039;: 123,\n \n¬† ¬† &#039;signup_ts&#039;: &#039;2019-06-01 12:22&#039;, ¬†\n \n¬† ¬† &#039;tastes&#039;: {\n \n¬† ¬† ¬† ¬† &#039;wine&#039;: 9,\n \n¬† ¬† ¬† ¬† b&#039;cheese&#039;: 7, ¬†\n \n¬† ¬† ¬† ¬† &#039;cabbage&#039;: &#039;1&#039;, ¬†\n \n¬† ¬† },\n \n}\n \n  \n \nuser = User(**external_data) ¬†# Valid data, creates without issue NOTE: cabbage will have int(1) as value not str(&quot;1&quot;)\n \n  \n \nexternal_data = {&#039;id&#039;: &#039;not an int&#039;, &#039;tastes&#039;: {}} ¬†\n \n  \n \nUser(**external_data) ¬†# Invalid data, raises ValidationError\n \nThere are some more strict systems you can use if you want to enforce static typing (checking before you run code). The most popular is mypy, which throws errors if you try to run code that might have the wrong type. There‚Äôs also a newer library called pyre from meta (formerly facebook) which has a playground you can test with.\nThere‚Äôs a few others:\n\n\nGoogle Pytype\n\n\nMicrosoft Pyright\n\n\nPacking and Unpacking ¬ß\nWhen looking at collections you can ‚Äúunpack‚Äù them. This basically allows you to break them up into peices. For example:\n \nshopping_list = [&quot;eggs&quot;, &quot;ham&quot;, &quot;spam&quot;]\n \n  \n \nitem1, *remainders = shopping_list\n \n  \n \nprint(item1) # &#039;eggs&#039;\n \nprint(remainders) # [&#039;ham&#039;, &#039;spam&#039;]\n \nThe *remainder will ‚Äúunpack‚Äù values. This basically will ‚Äúconsume‚Äù collections. So item1 will access the first item in the list, and *remainders will unpack the remaining values into it. This can be used in a ton of situations, one major one is to unpack variables as parameters for functions. So for example let‚Äôs say someone has a tuple with coordinates coords = (x, y, z), and a function process_object(x, y, z), we can unpack the coords variable into the function:\n \ncoords = (x, y, z)\n \nprocess_object(*coords) # Same as process_object(x, y, z)\n \nYou can also use this to do the oposite and ‚Äúpack‚Äù values to allow for any number of parameters in a function (they will be put into a tuple):\n \ndef function(*parameters):\n \n¬† print(parameters)\n \n  \n \nfunction(1, 2, 3, 4, 5) # Prints: (1, 2, 3, 4, 5)\n \nYou could then unpack them using *:\n \ndef function(*parameters):\n \n¬† print(*parameters)\n \n  \n \nfunction(1, 2, 3, 4, 5) # Prints: 1 2 3 4 5\n \nYou can also do this with dictionaries, but it‚Äôs more complex. It will allow you to get the keys and values from a dictionary. So one useful case is combining two dictionaries. For example let‚Äôs say you have some of your user info in one dict, and some in another that you want to combine:\n \nuser_info_1 = {\n \n¬† &quot;id&quot;: 1,\n \n¬† &quot;first_name&quot;: &quot;Dene&quot;,\n \n¬† &quot;last_name&quot;: &quot;Atwill&quot;,\n \n}\n \n  \n \nuser_info_2 = {\n \n¬† &quot;first_name&quot;: &quot;Dene&quot;,\n \n¬† &quot;email&quot;: &quot;datwill0@wordpress.com&quot;,\n \n¬† &quot;gender&quot;: &quot;Male&quot;,\n \n¬† &quot;ip_address&quot;: &quot;38.119.114.174&quot;\n \n}\n \n  \n \nuser_info = {**user_info_1, **user_info_2} # {&#039;id&#039;: 1, &#039;first_name&#039;: &#039;Dene&#039;, &#039;last_name&#039;: &#039;Atwill&#039;, &#039;email&#039;: &#039;datwill0@wordpress.com&#039;, &#039;gender&#039;: &#039;Male&#039;, &#039;ip_address&#039;: &#039;38.119.114.174&#039;}\n \nAdditionally this can be used to capture keyword arguments:\n \ndef function(**keyword_arguments):\n \n¬† print(keyword_arguments)\n \n  \n \nfunction(first_name= &quot;Dene&quot;, last_name=&quot;Atwill&quot;) # prints: {&#039;first_name&#039;: &#039;Dene&#039;, &#039;last_name&#039;: &#039;Atwill&#039;}\n \nOne great use for this is that it will allow you to write a function that allows you to pass config variables to a function, and you never have to change the function signatures to support new config variables!\nMagic/dunder methods ¬ß\nMagic/dunder methods are special types of methods that have some sort of special functionality in python. They‚Äôre often called magic methods, but they‚Äôre also called dunder (double underscore) methods because they all follow the patern __&lt;name&gt;__(). If you‚Äôve created a class before you‚Äôve actually used one before __init__(). Why can‚Äôt you have an initialize method just called init() or start()? Because __init__() is reserved as a name and is invoked when the code that creates an instance is called, which is why it works at all.\nThere are tons of other existing dunder methods to interact with various aspects of python.\nPrinting ¬ß\nFor example let‚Äôs say you have a User class, when you try to print it to the console you will get something like &lt;__main__.User object at 0x0000017CC4F90310&gt;. This isn‚Äôt super useful, so how could we instead override what prints when we call print on an object? Let‚Äôs say we have a name and age attribute, and we want to print &lt;name&gt;: &lt;age&gt;.\nThere is a built in magic method called __repr__() (I believe this is a short version of representation), this allows you to override the representation of the object (which is what‚Äôs printed). All we need to do is return a string with what we want to print, for example:\n \nclass User:\n \n¬† ¬† def __init__(self, name, age):\n \n¬† ¬† ¬† self.name = name\n \n¬† ¬† ¬† self.age = age\n \n¬† ¬† def __repr__(self):\n \n¬† ¬† ¬† return f&quot;{self.name}: {self.age}&quot;\n \n  \n \nprint(User(&quot;Kieran&quot;, 24)) # Prints: &quot;Kieran: 24&quot;\n \nConversions ¬ß\nThere are tons of magic methods you can define to convert between types. These will also apply in implicit conversions (i.e. when printing something a call to convert the object into a string happens). These methods tend to follow this pattern when defined:\n \ndef __&lt;type&gt;__(self):\n \n¬† return value\n \nWhere type is some type (i.e. str, int, float), and value is some value of that type (i.e. &quot;Class&quot;, 12, 3.14). Let‚Äôs say for example we have a class (MyValue), that class takes in an int or float, and then when casted to a string returns the word representation of a number (i.e. 1 would be &quot;One&quot;), and other number types (int,float return that type of data):\n \n# Define lists of words for numbers 1-19 and multiples of 10 up to 90 (used in string conversion)\n \nones = [&quot;Zero&quot;, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;, &quot;Six&quot;, &quot;Seven&quot;, &quot;Eight&quot;, &quot;Nine&quot;, &quot;Ten&quot;, &quot;Eleven&quot;, &quot;Twelve&quot;, &quot;Thirteen&quot;, &quot;Fourteen&quot;, &quot;Fifteen&quot;, &quot;Sixteen&quot;, &quot;Seventeen&quot;, &quot;Eighteen&quot;, &quot;Nineteen&quot;]\n \ntens = [&quot;&quot;, &quot;Ten&quot;, &quot;Twenty&quot;, &quot;Thirty&quot;, &quot;Forty&quot;, &quot;Fifty&quot;, &quot;Sixty&quot;, &quot;Seventy&quot;, &quot;Eighty&quot;, &quot;Ninety&quot;]\n \n  \n \nclass MyValue:\n \n¬† ¬† def __init__(self, value):\n \n¬† ¬† ¬† if not type(value) in [float, int]:\n \n¬† ¬† ¬† ¬† # Try to cast invalid values into a float\n \n¬† ¬† ¬† ¬† value = float(value)\n \n¬† ¬† ¬† self.value = value\n \n  \n \n¬† ¬† def __int__(self):\n \n¬† ¬† ¬† # Returns a int representation of the object\n \n¬† ¬† ¬† return int(self.value)\n \n  \n \n¬† ¬† def __float__(self):\n \n¬† ¬† ¬† # Returns a float representation of the object\n \n¬† ¬† ¬† return float(self.value)\n \n¬† ¬† ###### Defining helper functions to help with the string conversion ######\n \n  \n \n¬† ¬† def convert_less_than_hundred(self, number):\n \n¬† ¬† ¬† ¬† # Function to convert a number less than 100 to text\n \n¬† ¬† ¬† ¬† if number &lt; 20:\n \n¬† ¬† ¬† ¬† ¬† ¬† return ones[number]\n \n¬† ¬† ¬† ¬† else:\n \n¬† ¬† ¬† ¬† ¬† ¬† return tens[number // 10] + &quot; &quot; + ones[number % 10]\n \n  \n \n¬† ¬† def convert_less_than_thousand(self, number):\n \n¬† ¬† ¬† ¬† # Function to convert a number less than 1_000 to text\n \n¬† ¬† ¬† ¬† if number &lt; 100:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_hundred(number)\n \n¬† ¬† ¬† ¬† else:\n \n¬† ¬† ¬† ¬† ¬† ¬† if number % 100 == 0:\n \n¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return ones[number // 100] + &quot; Hundred&quot;\n \n¬† ¬† ¬† ¬† ¬† ¬† else:\n \n¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return ones[number // 100] + &quot; Hundred and &quot; + self.convert_less_than_hundred(number % 100)\n \n¬† ¬† def convert_less_than_million(self, number):\n \n¬† ¬† ¬† ¬† # Function to convert a number less than 1_000_000 to text\n \n¬† ¬† ¬† ¬† thousands = number // 1000\n \n¬† ¬† ¬† ¬† remainder = number % 1000\n \n¬† ¬† ¬† ¬† if remainder == 0:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_thousand(thousands) + &quot; Thousand&quot;\n \n¬† ¬† ¬† ¬† else:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_thousand(thousands) + &quot; Thousand &quot; + self.convert_less_than_thousand(remainder)\n \n¬† ¬† def convert_less_than_billion(self, number):\n \n¬† ¬† ¬† ¬† # Function to convert a number less than 1_000_000_000 to text\n \n¬† ¬† ¬† ¬† if number &gt;= 1_000_000_000:\n \n¬† ¬† ¬† ¬† ¬† ¬† raise ValueError(f&quot;Number provided is too large (only up to billions accepted) recieved: {number}&quot;)\n \n¬† ¬† ¬† ¬† millions = number // 1000000\n \n¬† ¬† ¬† ¬† remainder = number % 1000000\n \n¬† ¬† ¬† ¬† if remainder == 0:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_thousand(millions) + &quot; Million&quot;\n \n¬† ¬† ¬† ¬† else:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_thousand(millions) + &quot; Million &quot; + self.convert_integer_to_text(remainder)\n \n¬† ¬† def convert_integer_to_text(self, number):\n \n¬† ¬† ¬† ¬† # Takes in an integer, and converts it to text\n \n¬† ¬† ¬† ¬† if not isinstance(number, int): # Confirm value is an int\n \n¬† ¬† ¬† ¬† ¬† ¬† raise ValueError(f&quot;Value not an integer {number}&quot;)\n \n¬† ¬† ¬† ¬† # Handle simple &amp; edge cases cases\n \n¬† ¬† ¬† ¬† if number == 0:\n \n¬† ¬† ¬† ¬† ¬† ¬† return &quot;Zero&quot;\n \n¬† ¬† ¬† ¬† elif number &lt; 0:\n \n¬† ¬† ¬† ¬† ¬† ¬† return &quot;Negative &quot; + self.convert_integer_to_text(-1 * number)\n \n  \n \n¬† ¬† ¬† ¬† # Handle 1-999\n \n¬† ¬† ¬† ¬† elif number &lt; 1000:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_thousand(number)\n \n  \n \n¬† ¬† ¬† ¬† # Handle 1000-999_999\n \n¬† ¬† ¬† ¬† elif number &lt; 1_000_000:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_million(number)\n \n  \n \n¬† ¬† ¬† ¬† # Handle 1_000_000-999_999_999\n \n¬† ¬† ¬† ¬† else:\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_less_than_billion(number)\n \n  \n \n¬† ¬† ###### End of Defining helper functions to help with the string conversion ######\n \n  \n \n¬† ¬† def __str__(self):\n \n¬† ¬† ¬† ¬† # Returns a string representation of the object\n \n¬† ¬† ¬† ¬† number = self.value\n \n¬† ¬† ¬† ¬† # Handle float input\n \n¬† ¬† ¬† ¬† if isinstance(number, float):\n \n¬† ¬† ¬† ¬† ¬† ¬† # Split into part before decimal (integer_part) and after (fractional_part)\n \n¬† ¬† ¬† ¬† ¬† ¬† integer_part, fractional_part = str(number).split(&#039;.&#039;)\n \n  \n \n¬† ¬† ¬† ¬† ¬† ¬† # Convert each part to a str\n \n¬† ¬† ¬† ¬† ¬† ¬† integer_text = self.convert_integer_to_text(int(integer_part))\n \n¬† ¬† ¬† ¬† ¬† ¬† fractional_text = &quot; &quot;.join([ones[int(n)] if int(n) &gt; 0 else &quot;Zero&quot; for n in fractional_part])\n \n¬† ¬† ¬† ¬† ¬† ¬† # Combine if fractional_text exists, else skip and return just integer part\n \n¬† ¬† ¬† ¬† ¬† ¬† if fractional_text:\n \n¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return integer_text + &quot; point &quot; + fractional_text\n \n¬† ¬† ¬† ¬† ¬† ¬† else:\n \n¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return integer_text\n \n  \n \n¬† ¬† ¬† ¬† # Handle integer input\n \n¬† ¬† ¬† ¬† elif isinstance(number, int):\n \n¬† ¬† ¬† ¬† ¬† ¬† return self.convert_integer_to_text(number) ¬†\n \nWe can then test this with:\n \n# Test converting integers to strings\n \nprint(str(MyClass(1))) # Prints: &#039;One&#039;\n \nprint(str(MyClass(10))) # Prints: &#039;Ten&#039;\n \nprint(str(MyClass(20))) # Prints: &#039;Twenty Zero&#039;\n \nprint(str(MyClass(12))) # Prints: &#039;Twelve&#039;\n \nprint(str(MyClass(45))) # Prints: &#039;Forty Five&#039;\n \nprint(str(MyClass(375))) # Prints: &#039;Three Hundred and Seventy Five&#039;\n \nprint(str(MyClass(5_231))) # Prints: &#039;Five Thousand Two Hundred and Thirty One&#039;\n \nprint(str(MyClass(25_231))) # Prints: &#039;Twenty Five Thousand Two Hundred and Thirty One&#039;\n \nprint(str(MyClass(954_231))) # Prints: &#039;Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One&#039;\n \nprint(str(MyClass(8_954_231))) # Prints: &#039;Eight Million Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One&#039;\n \nprint(str(MyClass(85_954_231))) # Prints: &#039;Eighty Five Million Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One&#039;\n \nprint(str(MyClass(345_954_231))) # Prints: &#039;Three Hundred and Forty Five Million Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One&#039;\n \nprint(str(MyClass(999_999_999))) # Prints: &#039;Nine Hundred and Ninety Nine Million Nine Hundred and Ninety Nine Thousand Nine Hundred and Ninety Nine&#039;\n \n  \n \n# Test converting floats to strings\n \nprint(str(MyClass(1.0))) # Prints: &#039;One point Zero&#039;\n \nprint(str(MyClass(10.15))) # Prints: &#039;Ten point One Five&#039;\n \nprint(str(MyClass(20.2))) # Prints: &#039;Twenty Zero point Two&#039;\n \nprint(str(MyClass(12.34))) # Prints: &#039;Twelve point Three Four&#039;\n \nprint(str(MyClass(45.734))) # Prints: &#039;Forty Five point Seven Three Four&#039;\n \nprint(str(MyClass(375.841))) # Prints: &#039;Three Hundred and Seventy Five point Eight Four One&#039;\n \nprint(str(MyClass(5_231.9591))) # Prints: &#039;Five Thousand Two Hundred and Thirty One point Nine Five Nine One&#039;\n \nprint(str(MyClass(25_231.12345))) # Prints: &#039;Twenty Five Thousand Two Hundred and Thirty One point One Two Three Four Five&#039;\n \nprint(str(MyClass(954_231.324698))) # Prints: &#039;Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One point Three Two Four Six Nine Eight&#039;\n \nprint(str(MyClass(8_954_231.5454654))) # Prints: &#039;Eight Million Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One point Five Four Five Four Six Five Four&#039;\n \nprint(str(MyClass(85_954_231.45657988))) # Prints: &#039;Eighty Five Million Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One point Four Five Six Five Seven Nine Eight Eight&#039;\n \nprint(str(MyClass(345_954_231.5454654))) # Prints: &#039;Three Hundred and Forty Five Million Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One point Five Four Five Four Six Five Four&#039;\n \nprint(str(MyClass(999_954_231.0567646))) # Prints: &#039;Nine Hundred and Ninety Nine Million Nine Hundred and Fifty Four Thousand Two Hundred and Thirty One point Zero Five Six Seven Six Four Six&#039;\n \nprint(str(MyClass(999_999_999.9999999))) # Prints: &#039;Nine Hundred and Ninety Nine Million Nine Hundred and Ninety Nine Thousand Nine Hundred and Ninety Nine point Nine Nine Nine Nine Nine Nine Nine&#039;\n \n  \n \n# Test converting floats to ints\n \nprint(int(MyClass(1.0))) ¬† ¬†# Prints: 1\n \nprint(int(MyClass(10.15))) ¬†# Prints: 10\n \nprint(int(MyClass(20.2))) ¬† # Prints: 20\n \nprint(int(MyClass(12.34))) ¬†# Prints: 12\n \nprint(int(MyClass(45.734))) # Prints: 45\n \n  \n \n# Test converting ints to floats\n \nprint(float(MyClass(1))) ¬†# Prints: 1.0\n \nprint(float(MyClass(10))) # Prints: 10.0\n \nprint(float(MyClass(20))) # Prints: 20.0\n \nprint(float(MyClass(12))) # Prints: 12.0\n \nprint(float(MyClass(45))) # Prints: 45.0\n \nOperators ¬ß\nOperators allows you to do operator overloading. This allows you to overwrite what happens when you use an operator (+, -, /, //, % etc.). To do this you just use the pattern of using the operator name with one argument and a return:\n \nclass DoMath:\n \n¬† def __init__(self, value):\n \n¬† ¬† self.value = value\n \n  \n \n¬† def __add__(self, value):\n \n¬† ¬† return self.value + value\n \n  \n  \n \nprint(DoMath(5) + 3)\n \nOther Operators:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction nameOperator-__sub__()-__mul__()*__floordiv__()¬†//__truediv__()/__mod__()%__pow__()**\nKeep in mind you can also add an i in front of the function name to change the behaviour with assignment operators. For example __iadd__() will override behaviour for +=\nLogical Comparisons ¬ß\nLogical operators allows you to do logical operator overloading. This allows you to overwrite what happens when you use an operator (&lt;, &gt;, &lt;=, &gt;=, == etc.). To do this you just use the pattern of using the operator name with one argument and a return (must be a bool):\n \nclass CheckLessThan:\n \n¬† def __init__(self, value):\n \n¬† ¬† self.value = value\n \n  \n \n¬† def __lt__(self, value):\n \n¬† ¬† return self.value &lt; value\n \n  \n \nprint(DoMath(5) &lt; 3)\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction nameOperator__lt__()&lt;__le__()¬†&lt;=__eq__()¬†==__ne__()¬†!=__ge__()¬†&gt;=\nClass/data-structure type magic methods ¬ß\nThere are also several other dunder methods that exist for creating special types of objects including:\n\n__call__() for callable classes\n\n¬† - Be careful with this\n\n__getitem__() &amp; __setitem__() for key-value pairs (see example in this post)\n\n¬† - hash-maps\n¬† - dictionaries\n¬† - etc.\n\n__len__() for container-like structures (what len() uses)\n\n¬† - lists\n¬† - arrays\n¬† - linked-list\n¬† - doubly-linked-lists\n\n__enter__() &amp; __exit__() for context managers\n\n¬† - files\n¬† - sockets\n\n\n__iter__() &amp; __next__() for iterators\n\n\nCreating your own dunder methods ¬ß\nWhy not create your own magic methods? If you‚Äôre writing a program it seems ‚Äúpythonic‚Äù to create your own magic methods that can be used by an API (I did this for this project, where I created __html__() to turn a class into HTML). There is an implicit danger with doing this though.\nThe PSF (group that makes python) reserves the right to create whatever of these dunder methods they want. This means something like __html__() if it ever gets imlemented in python natively will break my app. So if you rely on this in your programs then python can completely break your program at any point, so you need to be careful.\nHigher order functions\nA higher order function will allow you to run code before and after a function executes. To explain how this works you need to understand that EVERYTHING in python is an object, including functions. If I look at this example:\n \ndef foo(a, b):\n \n¬† return b-a\n \n  \n \nprint(type(foo)) # &lt;class &#039;function&#039;&gt;\n \nWe can see the type of foo is the class function. Specifically it‚Äôs a class that runs the function body when __call__() is called. Adding a parenthesis to the end of a class causes this __call__() to happen, so foo() is a shortform for foo.__call__(). So since it‚Äôs a class we can pass it as an object the same way we could with other classes and call it later. This can help us solve some more awkward issues like timing functions.\nLet‚Äôs say we want a function we can use to measure how long a function takes to run, the basic code would look like this:\n \nimport time\n \n  \n \ndef foo(a, b):\n \n¬† time.sleep(.3)\n \n¬† return b-a\n \n  \n \nbefore = time.time()\n \nfoo(1,2)\n \nafter = time.time()\n \n  \n \ntime_taken = after-before\n \n  \n \nprint(f&quot;foo() took {time_taken}&quot;) # foo() took 0.30090832710266113\n \nSo turning this approach into a function we get:\n \nimport time\n \n  \n \ndef foo(a, b):\n \n¬† time.sleep(.3)\n \n¬† return b-a\n \n  \n \ndef time_function(function_to_time):\n \n¬† before = time.time()\n \n¬† function_to_time(1,2)\n \n¬† after = time.time()\n \n¬† time_taken = after-before\n \n¬† return time_taken\n \n  \n \nprint(f&quot;foo() took {time_function(foo)}&quot;) # foo() took 0.30090832710266113\n \nBut, how do we allow for people to pass arguments to the function? We could hardcode passing in 2 parameters, but what if we want to time a function with 3, or 4 parameters? We can allow a function to accept an arbitrary number of arguments to a function using *:\n \nimport time\n \n  \n \ndef foo(a, b):\n \n¬† time.sleep(.3)\n \n¬† return b-a\n \n  \n \ndef time_function(function_to_time, *args):\n \n¬† before = time.time()\n \n¬† function_to_time(*args)\n \n¬† after = time.time()\n \n¬† time_taken = after-before\n \n¬† return time_taken\n \n  \n \nprint(f&quot;foo() took {time_function(foo, 1, 2)}&quot;) # foo() took 0.30090832710266113\n \n*args in this case allows us to pass any number of arguments (see Packing and Unpacking for details and details about using keyword/named arguments).\nDecorators ¬ß\nDecorators are an extra layer of syntactic sugar that allow you to make higher order functions easier to work with. If we take our example of a timing function like this:\n \nimport time\n \n  \n \ndef foo(a, b):\n \n¬† time.sleep(.3)\n \n¬† return b-a\n \n  \n \ndef time_function(function_to_time, *args):\n \n¬† before = time.time()\n \n¬† function_to_time(*args)\n \n¬† after = time.time()\n \n¬† time_taken = after-before\n \n¬† return time_taken\n \n  \n \nprint(f&quot;foo() took {time_function(foo, 1, 2)}&quot;) # foo() took 0.30090832710266113\n \nFrom this lets say we want to always time the foo() function (for example if it was a benchmark function). We can do this by using an @ and the function name we want to wrap, and put it before the definition. In order for this to work there is an awkward step, we need to create an inner function, which runs our function:\n \nimport time\n \n  \n \ndef time_function(function_to_time):\n \n¬† def dummy_function(*args):\n \n¬† ¬† before = time.time()\n \n¬† ¬† function_to_time(*args)\n \n¬† ¬† after = time.time()\n \n¬† ¬† time_taken = after-before\n \n¬† ¬† return time_taken\n \n¬† return dummy_function\n \n  \n \n@time_function\n \ndef foo(a, b):\n \n¬† time.sleep(.3)\n \n¬† return b-a\n \n  \n \nprint(f&quot;foo() took {foo(1, 2)}&quot;) # foo() took 0.30090832710266113\n \nSo what just happened? When foo() runs time_function and passes itself as an instance to time_function(). Which is a fancy way to say foo() passes itself and it‚Äôs arguments to time_function(). From there we must create a closure to get our variables back. So dummy_function() exists to capture *args (positional arguments to the function [in our case 1, 2]).\nSo all in all we are running foo() with it‚Äôs arguments inside dummy_function(), we are then returning the time taken from the function, and with our decorator (the time_function()) we are returning the dummy_function to be called. So foo(1,2) calls dummy_function(1,2) and returns it‚Äôs time_taken.\nThis works great‚Ä¶ but keep in mind that when we called foo() we got the result of time_function() NOT the function call. If we wanted the value of the function call we need to capture it in time_function(), and return it instead:\n \nimport time\n \n  \n \ndef time_function(function_to_time):\n \n¬† def dummy_function(*args):\n \n¬† ¬† before = time.time()\n \n¬† ¬† result = function_to_time(*args)\n \n¬† ¬† after = time.time()\n \n¬† ¬† time_taken = after-before\n \n¬† ¬† print(f&quot;{function_to_time.__name__}() took {time_taken}&quot;) # foo() took 0.30090832710266113\n \n¬† ¬† return result\n \n¬† return dummy_function\n \n  \n \n@time_function\n \ndef foo(a, b):\n \n¬† time.sleep(.3)\n \n¬† return b-a\n \n  \n \nfoo(1,2) # Returns 1\n \nIf we wanted to return both, we could:\n \nimport time\n \n  \n \ndef time_function(function_to_time):\n \n¬† def dummy_function(*args):\n \n¬† ¬† before = time.time()\n \n¬† ¬† result = function_to_time(*args)\n \n¬† ¬† after = time.time()\n \n¬† ¬† time_taken = after-before\n \n¬† ¬† return result, time_taken\n \n¬† return dummy_function\n \n  \n \n@time_function\n \ndef foo(a, b):\n \n¬† time.sleep(.3)\n \n¬† return b-a\n \n  \n \nresult, time_taken = foo(1,2) # Returns (1, 0.30090832710266113)\n \nprint(f&quot;foo() took {time_taken} and had a result of {result}&quot;) # foo() took 0.30090832710266113 and had a result of 1\n \nProperties (getters and setters) ¬ß\nProperties are a method in python to enforce the getter-setter pattern. This is more popular in languages like Java, but essentially instead of having tons of attributes that you access directly you have methods that control access to, and modification of certain attributes. This is useful for various scenarios such as:\n\n\nEnsuring a provided value is within a range when trying to set an attribute to the value\n\n\nIf a value is taken from a remote service then ensuring it is up to date when accessing\n\n\nIn asynchronus contexts it can be used to ensure locks and safe concurrent access/writes\n\n\nLet‚Äôs say for example you have an app that displays a dashboard about a city, this includes the name, population and temperature. When people access the population and temperature you want to access external services (like the city registry for population, and a weather monitor for remperature). So every time you want a bit of code to run to make sure the value being accessed is up to date. To do this you can make the attributes for temperature and population into properties. Then for each you will need a property declaration (the getter), and a setter. The getter will be used when people call City.temperature or City.population, and the setter will run when City.temperature = value or City.population = value is called.\n \nMINIMUM_TEMPERATURE_CELCIUS = -273 # Absolute zero in celcius\n \n  \n \nclass City:\n \n¬† ¬† def __init__(self, name, population, temperature=0):\n \n¬† ¬† ¬† ¬† self.name = name\n \n¬† ¬† ¬† ¬† self.population = population\n \n¬† ¬† ¬† ¬† self.temperature = temperature\n \n  \n \n¬† ¬† @property\n \n¬† ¬† def population(self) -&gt; int:\n \n¬† ¬† ¬† ¬† api_result = 1_000_000 # A fake call to the external API\n \n¬† ¬† ¬† ¬† self._population = api_result\n \n¬† ¬† ¬† ¬† return self._population\n \n  \n \n¬† ¬† @temperature.setter\n \n¬† ¬† def population(self, value):\n \n¬† ¬† ¬† ¬† # No special processing\n \n¬† ¬† ¬† ¬† self._population = value\n \n  \n \n¬† ¬† @property\n \n¬† ¬† def temperature(self):\n \n¬† ¬† ¬† ¬† print(&quot;Getting value...&quot;)\n \n¬† ¬† ¬† ¬† return self._temperature\n \n  \n \n¬† ¬† @temperature.setter\n \n¬† ¬† def temperature(self, value):\n \n¬† ¬† ¬† ¬† print(&quot;Setting value...&quot;)\n \n¬† ¬† ¬† ¬† if value &lt; MINIMUM_TEMPERATURE_CELCIUS:\n \n¬† ¬† ¬† ¬† ¬† ¬† raise ValueError(f&quot;Temperature below {MINIMUM_TEMPERATURE_CELCIUS} is not possible&quot;)\n \n¬† ¬† ¬† ¬† self._temperature = value\n \nSo in this case temperature() and population() are the getters, which means that when you try to access City.temperature this function is called and the result is returned. Syntax wise you need to append an underscore to access the current value. Once you have declared a property, you can then create a setter as a decorator, which would be the functions that also take in value as a parameter.\nIterators ¬ß\nWhen you use a for loop in python there is something interesting happening under the hood. Iterators are a special type of class that implements the iterator protocol. The protocol operates on classes that have two magic methods. This is what is used when you iterate. For example take this for loop:\n \nshopping_list = [&quot;eggs&quot;, &quot;ham&quot;, &quot;spam&quot;]\n \n  \n \nfor item in shopping_list:\n \n¬† print(item)\n \nThis can functionally be done the same with:\n \nindex = 0\n \n  \n \nwhile index &lt; len(shopping_list):\n \n¬† print(shopping_list[index])\n \n¬† index += 1\n \nYou will notice that essentially our loop calls the next item, until there are no more items. This is what the iterator is based on, it asks you to tell it what to call on each iteration (__iter__()), and then on each iteration it will call that Iterable‚Äôs __next__() function until a StopIteration exception is raised.\nCreating your own Iterator ¬ß\nWith that knowledge let‚Äôs create an iterator to understand how this works:\n \nfrom typing import List\n \n  \n \nclass ShoppingList:\n \n¬† def __init__(self, items:List[str]):\n \n¬† ¬† self.items = items\n \n¬† ¬† self.current_index = 0\n \n  \n \n¬† def __iter__(self):\n \n¬† ¬† return self # Shopping list is an Iterator and an Iterable\n \n¬† def __next__(self):\n \n¬† ¬† if self.current_index &lt; len(self.items):\n \n¬† ¬† ¬† ¬† return_value = self.items[self.current_index]\n \n¬† ¬† ¬† ¬† self.current_index += 1\n \n¬† ¬† ¬† ¬† return return_value\n \n¬† ¬† raise StopIteration\n \n  \n \nfor item in ShoppingList([&quot;Eggs&quot;, &quot;Ham&quot;, &quot;Spam&quot;]):\n \n¬† print(item)\n \nThis means you can also make Iterators out of things that don‚Äôt have a defined length. For example let‚Äôs say you have a database you‚Äôre looping through, but data is coming in while you‚Äôre looping. Instead of storing the current state and iterating over that, you can continuously keep iterating until a StopIteration is raised!\nList comprehensions ¬ß\nA list comprehension syntactically shorter way to produce a list of values with a simple calculation. It is intended to replace the design pattern of:\n\n\ninstantiating an empty list\n\n\nIterate and store values in the list\n\n\nreturn or use list values.\n\n\nFor example:\n \nresult = [] # 1. Initialize empty list\n \n  \n \n# 2. Iterate and store values in the list\n \nfor number in range(10): # Square numbers from 0-9 and add them to the result list\n \n¬† ¬† result.append(number**2)\n \n  \n \nprint(result) # 3. Return or use list values\n \nCan be shortened to:\n \nresult = [number ** 2 for number in range(10)] # Steps 1-2\n \n  \n \nprint(result) # 3. Return or use list values\n \nwhich produces:\n \n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n \nIt does exactly the same as the above example, it is just shorter. The basic syntax is [operation for variable in iterable] Were operation is the calculation (or function) being run, variable is the name for the temporary iteration variable made, and iterable is some form of iterable (list, generator, set etc.). We can also do this conditionally, so for example if we wanted to only include even numbers we could do:\n \nevens = [number for number in range(10) if number %2 == 0]\n \nprint(evens) # [0, 2, 4, 6, 8]\n \nAnd we can do an if-else statement using:\n \nevens = [&quot;even&quot; if number %2 == 0 else &quot;odd&quot; for number in range(10)]\n \nprint(evens) # [&#039;even&#039;, &#039;odd&#039;, &#039;even&#039;, &#039;odd&#039;, &#039;even&#039;, &#039;odd&#039;, &#039;even&#039;, &#039;odd&#039;, &#039;even&#039;, &#039;odd&#039;]\n \nGenerators ¬ß\nA generator is a type of iterator. This will allow you to make an iterator out of results of functions. For example:\n \ndef lots_of_numbers():\n \n¬† for number in range(10_000_000):\n \n¬† ¬† yield number\n \n  \n \nfor number in lots_of_numbers:\n \n¬† print(number)\n \nEssentially you can iterate over results 1 at a time. The question is why? Efficiency.\nIn order to iterate over 10 million numbers you would normally need to put those numbers in a list, store that list and then iterate over it. This means that data needs to be stored somewhere while iterating. With a generator the value is generated when it‚Äôs needed, and then is ‚Äúpaused‚Äù until next() is called on it again. So if instead of a full loop I did something like:\n \ndef lots_of_numbers():\n \n¬† for number in range(10_000_000):\n \n¬† ¬† yield number\n \n  \n \nnums = lots_of_numbers()\n \n  \n \nprint(next(nums)) # prints 0\n \nprint(next(nums)) # prints 1\n \nWhich we can run while using essentially 0 memory. We can also use generators to do memory efficient returns of different values. For example let‚Äôs say we need to get a bunch of data from an API but don‚Äôt want to have to store it all we could turn the response into a generator and only process the results one at a time. Lets say for example that get_user_orders() sends back a JSON string that we‚Äôre storing in a file:\n \ndef get_user_info():\n \n¬† yield get_user_name() # &quot;kieran&quot;\n \n¬† yield get_user_orders() # Returns a large JSON string\n \n¬† yield get_user_age() # 24\n \n  \n \nuser_info = get_user_info()\n \n  \n \nprint(next(user_info)) # kieran\n \nprint(next(user_info)) # prints a large JSON string\n \nprint(next(user_info)) # 24\n \nThis means we only use the memory for get_user_orders() when the second next() is called, compared to something more traditional like this:\n \ndef get_user_info():\n \n¬† return {\n \n¬† ¬† &quot;name&quot;: get_user_name(),\n \n¬† ¬† &quot;orders&quot;: get_user_orders(),\n \n¬† ¬† &quot;age&quot;: get_user_age()\n \n¬† }\n \n  \n \nuser_info = get_user_info()\n \n  \n \nprint(user_info) # prints a large JSON string\n \nWe need to store it in RAM the whole time!\nDataclasses ¬ß\nDataclasses are a special way to define classes in python. They help make classes more efficient, but have some caveats (that I find are positives), namely all your attributes must be defined with type hints. For example here is a User class the typical python way:\n \nclass User:\n \n¬† ¬†def __init__(self, name, age, birthday):\n \n¬† ¬† ¬† self.name = name\n \n¬† ¬† ¬† self.age = age\n \n¬† ¬† ¬† self.birthday = birthday\n \nNow here is the same class in a dataclass:\n \nfrom datetime import datetime\n \nfrom dataclasses import dataclass\n \n  \n \n@dataclass\n \nclass User:\n \n¬† ¬† ¬† name: str\n \n¬† ¬† ¬† age:int\n \n¬† ¬† ¬† birthday:datetime\n \nThe handy thing about this is that the birthday attribute was not clear in the original example. It could have been a 3 value tuple for year, month, day ((1998,10,28)), a formatted string &quot;28-10-1998&quot; or any other types. But now users know what type they should use (this is not enforced).\nIf you need to run code after a class instance is created you can use __post_init__(self).\n__post_init__() ¬ß\nThis is a magic method that runs after your dataclass instance is setup. So for example maybe you want to do some birthday checking to make sure someone‚Äôs birthday matches their age, and they aren‚Äôt saying they‚Äôre over 200 years old:\n \nfrom datetime import datetime\n \nfrom dataclasses import dataclass\n \n  \n \n@dataclass\n \nclass User:\n \n¬† ¬† name: str\n \n¬† ¬† age:int\n \n¬† ¬† birthday:datetime\n \n  \n \n¬† ¬† def __post_init__(self):\n \n¬† ¬† ¬† if self.age &gt; 200:\n \n¬† ¬† ¬† ¬† raise ValueError(&quot;You can&#039;t be over 200 years old &gt;:(&quot;)\n \n¬† ¬† ¬† if ((datetime.now().year - self.birthday.year) != self.age) and ((datetime.now().year - self.birthday.year) != self.age+1):\n \n¬† ¬† ¬† ¬† raise ValueError(&quot;Your birthday doesn&#039;t match your age&quot;)\n \nprint(User(&quot;Kieran&quot;, 24, datetime(1998,10,29)))\n \n  \n \n# Invalid\n \nprint(User(&quot;Kieran&quot;, 24, datetime(1864,10,5)))\n \nprint(User(&quot;Kieran&quot;, 400, datetime(2023-400,10,5)))\n \nClassVar‚Äôs ¬ß\nA class variable is a variable that exists as part of a class not part of an instance. This means each instance has the same value because it comes from the class they come from. This is handy in many situations such as keeping track of isntances that are created:\n \nfrom __future__ import annotations\n \nfrom typing import ClassVar, List\n \nfrom dataclasses import dataclass\n \n  \n \n@dataclass\n \nclass Slide:\n \n¬† ¬† content: str\n \n¬† ¬† slides: ClassVar[List[Slide]] = []\n \n  \n \n¬† ¬† def __post_init__(self):\n \n¬† ¬† ¬† Slide.slides.append(self)\n \n  \n  \n \nSlide(&quot;Hello World&quot;)\n \nSlide(&quot;World Hello&quot;)\n \nSlide(&quot;HeLlO WoRlD&quot;)\n \n  \n \nprint(Slide.slides) # [Slide(content=&#039;Hello World&#039;), Slide(content=&#039;World Hello&#039;), Slide(content=&#039;HeLlO WoRlD&#039;)]\n \nSlide.slides will now have a list of every class instance that is created, but keep in mind this means that the instances will NEVER be deleted unless you clear them out. So you might end up wasting a ton of memory. You can resolve this by having some sort of Slide.delete() method to remove itself from the list when removed:\n \nfrom __future__ import annotations\n \nfrom typing import ClassVar, List\n \nfrom dataclasses import dataclass\n \n@dataclass\n \nclass Slide:\n \n¬† ¬† content: str\n \n¬† ¬† slides: ClassVar[List[Slide]] = []\n \n  \n \n¬† ¬† def __post_init__(self):\n \n¬† ¬† ¬† Slide.slides.append(self)\n \n¬† ¬† def delete(self):\n \n¬† ¬† ¬† Slide.slides.remove(self)\n \n  \n \nSlide(&quot;Hello World&quot;)\n \nq = Slide(&quot;World Hello&quot;)\n \nSlide(&quot;HeLlO WoRlD&quot;)\n \n  \n \nprint(Slide.slides) # [Slide(content=&#039;Hello World&#039;), Slide(content=&#039;World Hello&#039;), Slide(content=&#039;HeLlO WoRlD&#039;)]\n \nq.delete()\n \nprint(Slide.slides) # [Slide(content=&#039;Hello World&#039;), Slide(content=&#039;HeLlO WoRlD&#039;)]\n \nFields ¬ß\nSome types of attributes in dataclasses need to be instantiated in more complex ways. These types require you to use field(). For example most lists will need you to use a function to instantiate it:\n \nfrom typing import ClassVar, List, Any\n \nfrom dataclasses import dataclass, field\n \n  \n \n@dataclass\n \nclass Student:\n \n¬† name:str\n \n¬† age:int\n \n¬† student_id: str\n \n  \n \ndef create_empty_list() -&gt; List[Any]:\n \n¬† return []\n \n  \n \n@dataclass\n \nclass School:\n \n¬† students: List[Student] = field(default_factory=create_empty_list)\n \nSo in this case the field() function takes in a default_factory which is a Callable. This is a great case for using anonymous functions/lambdas:\n \nfrom typing import ClassVar, List, Any\n \nfrom dataclasses import dataclass, field\n \n  \n \n@dataclass\n \nclass Student:\n \n¬† name:str\n \n¬† age:int\n \n¬† student_id: str\n \n  \n \n@dataclass\n \nclass School:\n \n¬† students: List[Student] = field(default_factory=lambda: [])\n \nContext managers ¬ß\nThere are many situations where you will want to have an object exist temporarily, and that object must run some code to ‚Äúclose‚Äù it. The most common case is files. Check out this python code:\n \nf = open(&quot;my_file.txt&quot;, &quot;w+&quot;)\n \n  \n \nf.write(&quot;some content&quot;)\n \n  \n \n... # more code\n \n  \n \nf.write(&quot;some content&quot;)\n \n  \n \n... # more code\n \n  \n \nf.write(&quot;some content&quot;)\n \nYou will notice we opened the file, wrote to it a few times, and never closed it. Lets say the code between one of the writes took a while, and someone else wanted to write to the file, what happens? In the best case the won‚Äôt be allowed to write to the file, in the worst case the changes will trample over each other, or just cause a file corruption in some cases (like if an error happens mid-write). This is why we have to close the file between writes:\n \nf = open(&quot;my_file.txt&quot;, &quot;w+&quot;)\n \nf.write(&quot;some content&quot;)\n \nf.close()\n \n  \n \n... # more code\n \n  \n \nf = open(&quot;my_file.txt&quot;, &quot;w+&quot;)\n \nf.write(&quot;some content&quot;)\n \nf.close()\n \n  \n \n... # more code\n \n  \n \nf = open(&quot;my_file.txt&quot;, &quot;w+&quot;)\n \nf.write(&quot;some content&quot;)\n \nf.close()\n \nThis is very tedious, and doesn‚Äôt guarentee you will always remember to close your file. This is where context managers come in. A context manager is an object that defines an ‚Äúopening‚Äù, and ‚Äúclose‚Äù and will even handle if an error is raised to make sure the file is still closed anyway. You can technically call these manually, but python has a with statement that makes this easier:\n \nwith open(&quot;my_file.txt&quot;, &quot;w+&quot;) as f:\n \n¬† f.write(&quot;some content&quot;)\n \n  \n \n... # more code\n \n  \n \nwith open(&quot;my_file.txt&quot;, &quot;w+&quot;) as f:\n \n¬† f.write(&quot;some content&quot;)\n \n  \n \n... # more code\n \n  \n \nwith open(&quot;my_file.txt&quot;, &quot;w+&quot;) as f:\n \n¬† f.write(&quot;some content&quot;)\n \nNow f only exists in the indentation level up from the with statement! Outside that indentation level it has either not yet been opened, or been closed!\nThese are implemented with magic/dunder methods.\nCreating your own context managers ¬ß\nTo create a context manager you just need a __enter__() and __exit__() method. For example:\n \nclass MyContextManager:\n \n¬† def __init__(self):\n \n¬† ¬† ...\n \n¬† def __enter__(self):\n \n¬† ¬† print(&#039;Opened&#039;)\n \n¬† ¬† return self\n \n¬† def __exit__(self, exc_type, exc_value, exc_traceback):\n \n¬† ¬† ¬† print(&#039;Closed&#039;)\n \n  \n \n¬† def do_stuff(self):\n \n¬† ¬† print(&quot;Hello&quot;)\n \n  \n \nwith MyContextManager() as m:\n \n¬† m.do_stuff()\n \n__enter__() is self-explanatory, but __exit__() has some interesting parameters. Like I said the method will be called even if there is an error thrown. Those parameters tell you if an error occurred (if no error occurs all 3 are None):\n\n\nexc_type; The type of the error (i.e. ValueError)\n\n\nexc_value; The instance of the exception raised\n\n\nexc_traceback; The traceback object related to the error\n\n\nLambdas\nLambdas are a way in python to declare anonymous functions. What this means is you can assign a function call to a variable. So for example let‚Äôs take the simplest case, a function that takes in a name and returns a greeting string using the name:\n \ndef generate_greeting(name: str):\n \n¬† ¬†return f&quot;Hello {name}&quot;\n \nWe can make this a lambda like this:\n \ngenerate_greeting = lambda name: f&quot;Hello {name}&quot;\n \nLambdas follow the form of:\n \nlambda arguments: # Function body\n \nLambdas always return whatever value is evaluated in the function body. So since we evaluated the string, we get the string back at the end. We can then call it the same way:\n \ngenerate_greeting(&quot;Kieran&quot;) # &quot;Hello Kieran&quot;\n \nThis comes in handy in cases where something needs a Callable objet, but you don‚Äôt need to call it more than once. One example of this is in dataclasses. For some data types (like Lists) you need to provide a Callable object (object with a __call__() funtion) to initialize an attribute that is a list. So you can do this with a lambda that returns an empty list like so:\n \nfrom dataclasses import dataclass, field\n \n  \n \nempty_list = lambda : []\n \n  \n \n@dataclass\n \nclass Student:\n \n¬† ¬†grades:List[int] = field(default_factory=empty_list) # Initialize Student.grades to an empty list\n \nAdditional Resources ¬ß\n\nInside the Python GIL. (youtube.com)\n"}}